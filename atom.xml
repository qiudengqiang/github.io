<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>techbird&#39;s blog</title>
  
  <subtitle>技术鸟的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://techbird.me/"/>
  <updated>2018-04-29T09:01:23.537Z</updated>
  <id>http://techbird.me/</id>
  
  <author>
    <name>techbird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-多线程之GCD</title>
    <link href="http://techbird.me/2018/04/29/ios-thread-gcd/"/>
    <id>http://techbird.me/2018/04/29/ios-thread-gcd/</id>
    <published>2018-04-29T07:59:59.000Z</published>
    <updated>2018-04-29T09:01:23.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD与-NSThread-的对比"><a href="#GCD与-NSThread-的对比" class="headerlink" title="GCD与 NSThread 的对比"></a>GCD与 NSThread 的对比</h2><h3 id="NSThread的劣势"><a href="#NSThread的劣势" class="headerlink" title="NSThread的劣势"></a>NSThread的劣势</h3><ul><li>如果要开多个线程 NSThread 必须实例化多个线程对象</li><li>NSThread 靠 NSObject 的分类方法实现的线程间通讯,GCD 靠 block</li></ul><h3 id="GCD的优势"><a href="#GCD的优势" class="headerlink" title="GCD的优势"></a>GCD的优势</h3><ul><li>让代码更加简单,易于阅读和维护</li><li>使用GCD 不需要管理线程的创建/销毁/复用的过程,不用关心线程的生命周期</li><li>充分利用CPU的内核</li></ul><h2 id="队列有哪些，任务有几种"><a href="#队列有哪些，任务有几种" class="headerlink" title="队列有哪些，任务有几种"></a>队列有哪些，任务有几种</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>串行队列（Serial Dispatch Queue）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure></li><li><p>并行队列(Concurrent Dispatch Queue)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li><p>同步任务(sync)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li><li><p>异步任务（async）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li></ul><h2 id="写一个死锁程序"><a href="#写一个死锁程序" class="headerlink" title="写一个死锁程序"></a>写一个死锁程序</h2><ul><li><p>主队列+同步任务=死锁</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>) deadlockDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start”);</span></span><br><span class="line"><span class="string">dispatch_sync(queue, ^&#123;</span></span><br><span class="line"><span class="string">NSLog(@"</span>执行中...%<span class="string">@",[NSThread currentThread]);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">NSLog(@"</span>end<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>死锁解决办法：主队列中的同步任务放进子线程中,不使其阻塞主线程</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>) resolveDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_queue_create(<span class="string">"ZJ"</span>, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"执行中...%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列的两个参数分别代表什么？"><a href="#全局队列的两个参数分别代表什么？" class="headerlink" title="全局队列的两个参数分别代表什么？"></a>全局队列的两个参数分别代表什么？</h2><ul><li>参数1：服务质量(队列对任务调度的优先级)/iOS 7.0 之前，是优先级，传入<code>0</code>在所有系统上使用默认设置</li><li>参数2：预留参数，以便于扩展，一般传入<code>0</code></li><li><strong>小结</strong>：如果要适配 iOS 7.0 &amp; 8.0，需要使用以下代码：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列和并发队列的区别"><a href="#全局队列和并发队列的区别" class="headerlink" title="全局队列和并发队列的区别"></a>全局队列和并发队列的区别</h2><h3 id="全局队列"><a href="#全局队列" class="headerlink" title="全局队列"></a>全局队列</h3><ul><li>没有名称</li><li>无论MRC &amp; ARC都不需要考虑释放</li></ul><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><ul><li>有名称，和 NSThread 的 name 属性作用类似</li><li>如果在 <code>MRC</code> 开发时,需要使用 <code>dispatch_release(q);</code> 释放相应的对象</li></ul><h3 id="队列和任务组合总结"><a href="#队列和任务组合总结" class="headerlink" title="队列和任务组合总结"></a>队列和任务组合总结</h3><ul><li>串行和并发决定了任务的执行方式(串行一次一个，并发一次多个)</li><li>同步和异步决定了要不要开启新的线程 (同步不开，异步开)</li></ul><h2 id="GCD延迟执行-after"><a href="#GCD延迟执行-after" class="headerlink" title="GCD延迟执行(after)"></a>GCD延迟执行(after)</h2><ul><li>延迟操作: <code>dispatch_after</code> 这个函数默认是异步执行的<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) afterDemo&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span>*<span class="built_in">NSEC_PER_SEC</span>)),dispatch_get_global_queue(),^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"延迟执行的代码"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"开始"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="GCD一次性执行-once"><a href="#GCD一次性执行-once" class="headerlink" title="GCD一次性执行(once)"></a>GCD一次性执行(once)</h3><ul><li><code>dispatch_once_t</code> 内部有一把锁,能够保证线程安全.</li><li><strong>原理</strong>：<code>onceToken</code> 有个初始值,当第一次执行时,判断是否是初始值,如果是初始值就执行函数内部的代码,执行结束之前会修改<code>onceToken</code>初始值.反之,就不执行.<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)onceDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"返回值 %ld"</span>,onceToken);</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"hello"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="单例设计模式（iOS）"><a href="#单例设计模式（iOS）" class="headerlink" title="单例设计模式（iOS）"></a>单例设计模式（iOS）</h2><h3 id="单例设计模式的特点"><a href="#单例设计模式的特点" class="headerlink" title="单例设计模式的特点"></a>单例设计模式的特点</h3><ol><li>有一个全局访问点 (供全局实例化单例的类方法)</li><li>单例保存在静态存储区</li><li>在内存有且只有一份</li><li>生命周期跟APP一样长</li></ol><h3 id="如何做到被子类继承"><a href="#如何做到被子类继承" class="headerlink" title="如何做到被子类继承"></a>如何做到被子类继承</h3><ul><li>在给instance赋值时要使用<code>[self new]</code>或者<code>[[self alloc] init]</code></li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>) shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 保存在静态存储区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="comment">// 声明静态对象</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line">+(<span class="keyword">void</span>)initialize</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 只会开辟一次内存空间,只会被实例化一次</span></span><br><span class="line">  instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉式单例</span></span><br><span class="line">+(<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCD与-NSThread-的对比&quot;&gt;&lt;a href=&quot;#GCD与-NSThread-的对比&quot; class=&quot;headerlink&quot; title=&quot;GCD与 NSThread 的对比&quot;&gt;&lt;/a&gt;GCD与 NSThread 的对比&lt;/h2&gt;&lt;h3 id=&quot;NSThr
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="GCD" scheme="http://techbird.me/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程基础NSThread</title>
    <link href="http://techbird.me/2018/04/29/ios-nsthread/"/>
    <id>http://techbird.me/2018/04/29/ios-nsthread/</id>
    <published>2018-04-29T06:56:59.000Z</published>
    <updated>2018-04-29T08:10:54.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程基础（NSThread）"><a href="#多线程基础（NSThread）" class="headerlink" title="多线程基础（NSThread）"></a>多线程基础（NSThread）</h1><h2 id="NSThread创建线程的三种方式"><a href="#NSThread创建线程的三种方式" class="headerlink" title="NSThread创建线程的三种方式"></a>NSThread创建线程的三种方式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(demo:) object:<span class="string">@"alloc"</span>];</span><br><span class="line">- [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(demo:) toTarget:<span class="keyword">self</span> withObject:<span class="string">@"detach"</span>];</span><br><span class="line">- [<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(demo:) withObject:<span class="string">@"perform"</span>];</span><br></pre></td></tr></table></figure><h2 id="target和selector的关系"><a href="#target和selector的关系" class="headerlink" title="target和selector的关系"></a>target和selector的关系</h2><ul><li>执行哪个对象上的哪个方法.</li></ul><h2 id="线程的状态-生命周期"><a href="#线程的状态-生命周期" class="headerlink" title="线程的状态-生命周期"></a>线程的状态-生命周期</h2><ul><li><code>start</code> ：就绪状态，等待被CPU调用，当被调用的时候为运行状态</li><li><code>sleep/加锁</code>：阻塞状态</li><li><code>exit</code>：完全杀死（非正常死亡），<em>不要在主线程中调用</em></li></ul><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><h3 id="name-线程名称"><a href="#name-线程名称" class="headerlink" title="name (线程名称)"></a><code>name</code> (线程名称)</h3><ul><li>设置线程名称可以当线程执行的方法内部出现异常时，记录异常和当前线程</li></ul><h3 id="stackSize-栈区大小"><a href="#stackSize-栈区大小" class="headerlink" title="stackSize(栈区大小)"></a><code>stackSize</code>(栈区大小)</h3><ul><li>默认情况下，无论是主线程还是子线程，栈区大小都是 512K</li><li><p>栈区大小可以设置 </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">NSThread</span> currentThread].stackSize = <span class="number">1024</span> * <span class="number">1024</span>;</span><br></pre></td></tr></table></figure></li><li><p>必须是 <code>4KB</code> 的倍数</p></li></ul><h3 id="isMainThread-是否主线程"><a href="#isMainThread-是否主线程" class="headerlink" title="isMainThread (是否主线程)"></a><code>isMainThread</code> (是否主线程)</h3><h3 id="threadPriority-线程优先级"><a href="#threadPriority-线程优先级" class="headerlink" title="threadPriority (线程优先级)"></a><code>threadPriority</code> (线程优先级)</h3><ul><li>优先级，是一个浮点数，取值范围从<code>0~1.0</code></li><li><code>1.0</code>表示优先级最高</li><li><code>0.0</code>表示优先级最低</li><li>默认优先级是 <code>0.5</code></li><li><strong>优先级高只是保证 CPU 调度的可能性会高</strong></li></ul><h3 id="qualityOfService-服务质量-iOS-8-0-推出"><a href="#qualityOfService-服务质量-iOS-8-0-推出" class="headerlink" title="qualityOfService (服务质量,iOS 8.0 推出)"></a><code>qualityOfService</code> (服务质量,iOS 8.0 推出)</h3><ul><li><code>NSQualityOfServiceUserInteractive</code> - 用户交互，例如绘图或者处理用户事件</li><li><code>NSQualityOfServiceUserInitiated</code> - 用户需要</li><li><code>NSQualityOfServiceUtility</code> - 实用工具，用户不需要立即得到结果</li><li><code>NSQualityOfServiceBackground</code> - 后台</li><li><code>NSQualityOfServiceDefault</code> - 默认，介于用户需要和实用工具之间</li></ul><h2 id="线程安全-资源共享（互斥锁小结）"><a href="#线程安全-资源共享（互斥锁小结）" class="headerlink" title="线程安全-资源共享（互斥锁小结）"></a>线程安全-资源共享（互斥锁小结）</h2><ul><li><code>@ synchronized</code>互斥锁，使用了线程同步技术</li><li>同步锁/互斥锁：可以保证被锁定的代码，同一时间，只能有一个县城可以操作</li><li><code>self</code>：锁对象，任何继承自NSObject的对象都可以是锁对象，因为内部都有一把锁，而且是默认开着的</li><li>锁对象：一定要是全局的锁对象，要保证所有的线程都能访问，self是最方便使用的锁对象</li><li>互斥锁锁定你的范围应该尽量小，但是一定要锁住资源的读写部分</li><li>枷锁后程序的执行效率比不加锁的时候要低，因为线程要的等待解锁</li><li>牺牲了性能保证了安全</li></ul><h2 id="原子属性和非原子属性-以及自旋锁"><a href="#原子属性和非原子属性-以及自旋锁" class="headerlink" title="原子属性和非原子属性-以及自旋锁"></a>原子属性和非原子属性-以及自旋锁</h2><h3 id="nonatomic-非原子属性"><a href="#nonatomic-非原子属性" class="headerlink" title="nonatomic : 非原子属性"></a><code>nonatomic</code> : 非原子属性</h3><h3 id="atomic-原子属性"><a href="#atomic-原子属性" class="headerlink" title="atomic : 原子属性"></a><code>atomic</code> : 原子属性</h3><ul><li>线程安全的,针对多线程设计的属性修饰符,是默认值.</li><li>特点 : 单写多读</li><li>单写多读 : 保证同一时间,只有一个线程能够执行setter方法,但是可以有多个线程执行getter方法.</li><li>atomic 属性的setter里面里面有一把锁,叫做自旋锁.</li><li>原子属性的setter方法是线程安全的;但是,getter方法不是线程安全的.</li></ul><h3 id="nonatomic和atomic对比："><a href="#nonatomic和atomic对比：" class="headerlink" title="nonatomic和atomic对比："></a><code>nonatomic</code>和<code>atomic</code>对比：</h3><ul><li><code>nonatomic</code>: 非线程安全,适合内存小的移动设备.</li><li><code>atomic</code> : 线程安全,需要消耗大量的资源.性能比非原子属性要差一点</li></ul><h2 id="线程间通信（为什么能通信？）"><a href="#线程间通信（为什么能通信？）" class="headerlink" title="线程间通信（为什么能通信？）"></a>线程间通信（为什么能通信？）</h2><ul><li><code>performSelectorInBackground</code></li><li><code>performSelectorOnMainThread</code></li><li>因为多线程共享地址空间和数据空间， 一个线程的数据可以直接提供给其他线程使用,叫做线程间通信</li></ul><h1 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h1><h2 id="类方法initialize"><a href="#类方法initialize" class="headerlink" title="类方法initialize"></a>类方法initialize</h2><ul><li>initialize 会在类第一次被使用时调用</li><li>initialize 方法的调用是线程安全的</li></ul><h2 id="synthesize是啥？什么情况下使用？"><a href="#synthesize是啥？什么情况下使用？" class="headerlink" title="@synthesize是啥？什么情况下使用？"></a>@synthesize是啥？什么情况下使用？</h2><ul><li>首先一旦重写来属性的setter和getter方法后,系统不再自动生成带下划线的成员变量，而这行代码会创造一个带下划线前缀的实例变量名，同时使用这个属性生成getter 和 setter 方法。</li><li>使用<code>@synthesize</code> 只有一个目的——给实例变量起个别名，或者说为同一个变量添加两个名字。</li><li>如果要阻止自动合成，记得使用 <code>@dynamic</code> 。经典的使用场景是你知道已经在某处实现了getter/setter 方法，而编译器不知道的情况。</li><li>如何使用： <code>@synthesize obj2 = _obj2;</code></li></ul><h2 id="栈区-堆区-常量区"><a href="#栈区-堆区-常量区" class="headerlink" title="栈区/堆区/常量区"></a>栈区/堆区/常量区</h2><ul><li>操作内存的栈区速度很快;栈区存储空间地址是连续的</li><li>操作内存的常量区速度很快;内存空间只开辟一次;</li><li>操作内存的堆区速度相对栈区和常量区要慢些;堆区内存空间不连续,需要寻址<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储在栈区</span></span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 存储在常量区  </span></span><br><span class="line"> <span class="built_in">NSString</span> *str1 = <span class="string">@"hello"</span>;</span><br><span class="line"><span class="comment">// 存储在堆区</span></span><br><span class="line"> <span class="built_in">NSString</span> *str2 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hello_%d"</span>,i];</span><br></pre></td></tr></table></figure></li></ul><h2 id="NSUInteger和NSInteger的区别0114"><a href="#NSUInteger和NSInteger的区别0114" class="headerlink" title="NSUInteger和NSInteger的区别0114"></a><code>NSUInteger</code>和<code>NSInteger</code>的区别0114</h2><ul><li><code>NSUInteger</code> 无符号整数(没有负数)用 <code>%tu</code><br><code>%tu</code>NSUInteger的占位符，可以适配 NSUInteger的32位设备和64位设备<br>32位设备: NSUInteger是<code>无符号的int</code> (无符号表示没有正负数)<br>64位设备: NSUInteger是<code>无符号的long</code></li><li><code>NSInteger</code>有符号整数(有正负数)用 <code>%zd</code><br><code>%zd</code>NSInteger的占位符，可以适配 NSInteger的32位设备和64位设备<br>32位设备: NSInteger是<code>有符号的int</code> (有符号表示有正负数)<br>64位设备: NSInteger是<code>有符号的long</code></li><li>以上这种设计是为了自适应32位和64位CPU的架构.</li></ul><h2 id="loadView的注意事项"><a href="#loadView的注意事项" class="headerlink" title="loadView的注意事项"></a>loadView的注意事项</h2><ol><li>用于加载指定的视图，一旦重写了这个方法，Storyboard里面就不会去加载根视图了</li><li>先于<code>viewDidLoad</code>调用</li><li>不可以调用<code>super.loadView()</code></li><li>当<code>self.view == nil</code>时回调用此方法</li></ol><h2 id="ViewController的生命周期"><a href="#ViewController的生命周期" class="headerlink" title="ViewController的生命周期"></a>ViewController的生命周期</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F01.1d4fa57c6b9841bebc26fe8908fe6051.png" alt=""></p><ul><li><code>loadView</code>：用于加载制定的根试图</li><li><code>viewDidLoad</code>：试图加载完毕</li><li><code>viewWillAppear</code>：界面即将显示在屏幕上</li><li><code>viewDidAppear</code>：界面已经完全渲染在屏幕上</li><li><code>viewWillDisappear</code>：界面即将从屏幕上消失</li><li><code>viewDidDisappear</code>：界面已经完全消失</li><li><code>dealloc</code>：控制器销毁</li></ul><h2 id="什么时候用stong-weak"><a href="#什么时候用stong-weak" class="headerlink" title="什么时候用stong/weak"></a>什么时候用stong/weak</h2><ul><li>根视图和父视图需要使用<code>strong</code>; 子视图使用<code>weak</code></li><li>没有强指针指向的对象使用<code>strong</code>; 有强指针指向的可以可以<code>weak</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程基础（NSThread）&quot;&gt;&lt;a href=&quot;#多线程基础（NSThread）&quot; class=&quot;headerlink&quot; title=&quot;多线程基础（NSThread）&quot;&gt;&lt;/a&gt;多线程基础（NSThread）&lt;/h1&gt;&lt;h2 id=&quot;NSThread创建线程的
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="NSThread" scheme="http://techbird.me/tags/NSThread/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 打包证书创建流程</title>
    <link href="http://techbird.me/2018/04/28/xcode-pack-cer-create-process/"/>
    <id>http://techbird.me/2018/04/28/xcode-pack-cer-create-process/</id>
    <published>2018-04-28T03:48:37.000Z</published>
    <updated>2018-04-29T06:42:23.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建CSR证书"><a href="#创建CSR证书" class="headerlink" title="创建CSR证书"></a>创建CSR证书</h2><h3 id="点击spotlight输入keychain打开钥匙串"><a href="#点击spotlight输入keychain打开钥匙串" class="headerlink" title="点击spotlight输入keychain打开钥匙串"></a>点击spotlight输入keychain打开钥匙串</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180415-192128.ed09497c15d24f6bb84e812effb1d0f9.png" alt="">  </p><h3 id="生成CSR文件"><a href="#生成CSR文件" class="headerlink" title="生成CSR文件"></a>生成CSR文件</h3><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ae2ad2036be3471b9b1549406a95e44b.png" alt=""></p><h2 id="创建Cer证书"><a href="#创建Cer证书" class="headerlink" title="创建Cer证书"></a>创建Cer证书</h2><h3 id="登录-apple-developer"><a href="#登录-apple-developer" class="headerlink" title="登录 apple developer"></a><a href="https://developer.apple.com/account/" target="_blank" rel="noopener">登录 apple developer</a></h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.875c41f7a2ac4507a783cac258a194af.png" alt=""></p><h3 id="使用CSR文件创建Development和Distribution的CER证书并下载"><a href="#使用CSR文件创建Development和Distribution的CER证书并下载" class="headerlink" title="使用CSR文件创建Development和Distribution的CER证书并下载"></a>使用CSR文件创建Development和Distribution的CER证书并下载</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ca56c2a73e474422ac1aaac410172bc6.png" alt=""></p><h3 id="双击下载好的cer证书，然后导出对应的p12文件（dev-dis）"><a href="#双击下载好的cer证书，然后导出对应的p12文件（dev-dis）" class="headerlink" title="双击下载好的cer证书，然后导出对应的p12文件（dev/dis）"></a>双击下载好的cer证书，然后导出对应的p12文件（dev/dis）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.bc375b929a6f463f8d85d6f92e6bc853.png" alt=""></p><h2 id="创建Provisioning-Profile"><a href="#创建Provisioning-Profile" class="headerlink" title="创建Provisioning Profile"></a>创建Provisioning Profile</h2><p>这里要创建是三种profile（dev/dis/adhoc）<br><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.8b0bda299adf43029f16d552dceac353.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建CSR证书&quot;&gt;&lt;a href=&quot;#创建CSR证书&quot; class=&quot;headerlink&quot; title=&quot;创建CSR证书&quot;&gt;&lt;/a&gt;创建CSR证书&lt;/h2&gt;&lt;h3 id=&quot;点击spotlight输入keychain打开钥匙串&quot;&gt;&lt;a href=&quot;#点击spotl
      
    
    </summary>
    
      <category term="xcode" scheme="http://techbird.me/categories/xcode/"/>
    
    
      <category term="xcode" scheme="http://techbird.me/tags/xcode/"/>
    
      <category term="package" scheme="http://techbird.me/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://techbird.me/2018/04/22/hello-world/"/>
    <id>http://techbird.me/2018/04/22/hello-world/</id>
    <published>2018-04-21T16:31:37.333Z</published>
    <updated>2018-04-26T14:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="云标签" scheme="http://techbird.me/tags/%E4%BA%91%E6%A0%87%E7%AD%BE/"/>
    
      <category term="分类" scheme="http://techbird.me/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
