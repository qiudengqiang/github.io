<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>techbird&#39;s blog</title>
  
  <subtitle>timeline of techology</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://techbird.me/"/>
  <updated>2018-05-10T05:00:08.360Z</updated>
  <id>http://techbird.me/</id>
  
  <author>
    <name>techbird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C-Block</title>
    <link href="http://techbird.me/2018/05/10/oc-block/"/>
    <id>http://techbird.me/2018/05/10/oc-block/</id>
    <published>2018-05-10T03:21:20.000Z</published>
    <updated>2018-05-10T05:00:08.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Apple 在iOS4.0之后推出Block，它本身封装了一段代码并可以将这段代码当做变量，参数，属性，数据类型，函数（匿名），代码块（只有在被调用时才会执行）等等，使用方式灵活，功能十分强大。</p><h1 id="Block的简单使用"><a href="#Block的简单使用" class="headerlink" title="Block的简单使用"></a>Block的简单使用</h1><h2 id="定义Block"><a href="#定义Block" class="headerlink" title="定义Block"></a>定义Block</h2><ul><li><p>无参无返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span>(^block)() = ^()&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a no param and no return of block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure></li><li><p>有参无返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>(^block)(<span class="built_in">NSString</span> * ) = ^(<span class="built_in">NSString</span> * param)&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a has param and no return of block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block(<span class="string">@"param"</span>);</span><br></pre></td></tr></table></figure></li><li><p>有参有返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *(^block)(<span class="built_in">NSString</span> * ) = ^(<span class="built_in">NSString</span> * param)&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a has param and return of block"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">&#125;;</span><br><span class="line">block(<span class="string">@"param"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="定义Block的快捷方式"><a href="#定义Block的快捷方式" class="headerlink" title="定义Block的快捷方式"></a>定义Block的快捷方式</h2><blockquote><p>Block 的定义可以借助键入 inlineBlock 速记.</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inlineBlock</span></span><br><span class="line">returnType (^blockName)(parameterTypes) = ^(parameters) &#123;</span><br><span class="line">   statements</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Block定义成属性"><a href="#Block定义成属性" class="headerlink" title="Block定义成属性"></a>Block定义成属性</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span>(^block)();</span><br></pre></td></tr></table></figure><h2 id="Block作参数"><a href="#Block作参数" class="headerlink" title="Block作参数"></a>Block作参数</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)demo04&#123;</span><br><span class="line"> <span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"block become param"</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> [<span class="keyword">self</span> callbackWith:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)callbackWith:(<span class="keyword">void</span>(^)())block&#123;</span><br><span class="line"> <span class="comment">//调用外界传入的block</span></span><br><span class="line"> block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="typedef-定义Block"><a href="#typedef-定义Block" class="headerlink" title="typedef 定义Block"></a>typedef 定义Block</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^MyBlock)();</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">MyBlock block01 = ^&#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"block01"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block01();</span><br></pre></td></tr></table></figure><ul><li><p>小结：方便之处在于可以常用类型的Block可以用typedef来定义</p><h1 id="Block与外部变量"><a href="#Block与外部变量" class="headerlink" title="Block与外部变量"></a>Block与外部变量</h1><h2 id="Block内部访问-引用-外部变量"><a href="#Block内部访问-引用-外部变量" class="headerlink" title="Block内部访问/引用 外部变量"></a>Block内部访问/引用 外部变量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line">&#125;;</span><br><span class="line">num = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line">block();</span><br></pre></td></tr></table></figure></li><li><p><code>MRC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">018-05-10 12:33:49.178446+0800 BlockDemo[1825:245809] 0x7ffee31dc9dc 10</span><br><span class="line">2018-05-10 12:33:49.178655+0800 BlockDemo[1825:245809] &lt;__NSStackBlock__: 0x7ffee31dc9a8&gt; 0x7ffee31dc9dc 20</span><br><span class="line">2018-05-10 12:33:49.178770+0800 BlockDemo[1825:245809] 0x7ffee31dc9c8 10</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:36:47.248638+0800 BlockDemo[1887:256355] 0x7ffee517f9dc 10</span><br><span class="line">2018-05-10 12:36:47.248856+0800 BlockDemo[1887:256355] &lt;__NSMallocBlock__: 0x604000259530&gt; 0x7ffee517f9dc 20</span><br><span class="line">2018-05-10 12:36:47.249115+0800 BlockDemo[1887:256355] 0x604000259550 10</span><br></pre></td></tr></table></figure></li><li><p>小结<br>在block中访问外部的变量时，会自动拷贝到内存一份并开辟新的地址，这就是深拷贝</p></li></ul><h2 id="Block内部修改外部变量"><a href="#Block内部修改外部变量" class="headerlink" title="Block内部修改外部变量"></a>Block内部修改外部变量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"> <span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">   num = <span class="number">30</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> num = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line"> block();</span><br></pre></td></tr></table></figure><ul><li><p><code>MRC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:41:56.490868+0800 BlockDemo[2018:272473] 0x7ffee14519d8 10</span><br><span class="line">2018-05-10 12:41:56.491055+0800 BlockDemo[2018:272473] &lt;__NSStackBlock__: 0x7ffee1451980&gt; 0x7ffee14519d8 20</span><br><span class="line">2018-05-10 12:41:56.491165+0800 BlockDemo[2018:272473] 0x7ffee14519d8 30</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:43:13.402390+0800 BlockDemo[2047:277009] 0x7ffeea3149d8 10</span><br><span class="line">2018-05-10 12:43:13.402662+0800 BlockDemo[2047:277009] &lt;__NSMallocBlock__: 0x60400024da70&gt; 0x604000034cf8 20</span><br><span class="line">2018-05-10 12:43:13.402777+0800 BlockDemo[2047:277009] 0x604000034cf8 30</span><br></pre></td></tr></table></figure></li><li><p>小结<br>block内修改的外部变量，需要用<code>__block</code>修饰.在此后若被block访问修改，变量的内存地址会重新指向拷贝后开辟的新的内存地址.</p></li></ul><h2 id="验证一个想法"><a href="#验证一个想法" class="headerlink" title="验证一个想法"></a>验证一个想法</h2><blockquote><p>在<code>ARC</code>/<code>MRC</code>中block内<code>引用</code>外部变量地址如何在堆栈中变化，通过将Block自身作为自身的参数传入</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line">   <span class="keyword">void</span>(^block)(<span class="keyword">void</span>(^)()) = ^(<span class="keyword">void</span>(^block2)())&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block2,&amp;num,num);</span><br><span class="line">   &#125;;</span><br><span class="line">   num = <span class="number">20</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line">   <span class="comment">//本身作为参数传入并输出指针对象的堆栈</span></span><br><span class="line">   block(block);</span><br></pre></td></tr></table></figure><blockquote><p>1.在<code>ARC</code>中block内引用外部变量地址如何在堆栈中变化，</p></blockquote><ul><li><p>输出结果:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:51:29.359318+0800 BlockDemo[2216:302301] 0x7ffee29ab9dc 10</span><br><span class="line">2018-05-10 12:51:29.359563+0800 BlockDemo[2216:302301] &lt;__NSMallocBlock__: 0x600000259230&gt; 0x7ffee29ab9dc 20</span><br><span class="line">2018-05-10 12:51:29.359708+0800 BlockDemo[2216:302301] &lt;__NSMallocBlock__: 0x600000259230&gt; 0x600000259250 10</span><br></pre></td></tr></table></figure><blockquote><p>2.在<code>MRC</code>中block内引用外部变量地址如何在堆栈中变化，</p></blockquote></li><li><p>输出结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:46:27.120908+0800 BlockDemo[2153:287894] 0x7ffee8a699dc 10</span><br><span class="line">2018-05-10 12:46:27.121106+0800 BlockDemo[2153:287894] &lt;__NSStackBlock__: 0x7ffee8a699a8&gt; 0x7ffee8a699dc 20</span><br><span class="line">2018-05-10 12:46:27.121239+0800 BlockDemo[2153:287894] &lt;__NSStackBlock__: 0x7ffee8a699a8&gt; 0x7ffee8a699c8 10</span><br></pre></td></tr></table></figure></li><li><p>小结：<br><code>ARC</code>下，永远在堆区中。<code>MRC</code>下永远在栈区中</p></li></ul><h1 id="block内存管理（MRC-ARC）"><a href="#block内存管理（MRC-ARC）" class="headerlink" title="block内存管理（MRC/ARC）"></a>block内存管理（MRC/ARC）</h1><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><h3 id="当函数体不变时"><a href="#当函数体不变时" class="headerlink" title="当函数体不变时"></a>当函数体不变时</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"hello world"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 22:59:07.637768+0800 BlockDemo[3288:930159] &lt;__NSGlobalBlock__: 0x10afa20d8&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>不引用任何外部变量的 block 保存在全局区 NSGlobalBlock，如果Block没有引用外部变量,那么这个Block的函数体内部包装的代码都不会发生变化,而且执行效率高,保存在全局区;(类似不变的字符串存在常量区)</p><h3 id="当函数体可变时（即访问修改外部变量时）"><a href="#当函数体可变时（即访问修改外部变量时）" class="headerlink" title="当函数体可变时（即访问修改外部变量时）"></a>当函数体可变时（即访问修改外部变量时）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"hello world %d"</span>, i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br></pre></td></tr></table></figure></li><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:03:01.082413+0800 BlockDemo[3349:946888] &lt;__NSMallocBlock__: 0x600000440090&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>引用外部变量的 block 保存在 :<br><code>ARC</code> : 堆区 NSMallocBlock<br><code>MRC</code> : 栈区 NSStackBlock<br>因此在定义 block 属性时应该使用 <code>copy</code> 关键字，将 block 从栈区复制到堆区</p></li></ul><h2 id="Block属性"><a href="#Block属性" class="headerlink" title="Block属性"></a>Block属性</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 block 属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^demoBlock)();</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)blockDemo &#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"hello world %d"</span>, i);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br><span class="line"> <span class="comment">// 错误的写法，不会调用 setter 方法,MRC下,无法拷贝到堆区</span></span><br><span class="line"> <span class="comment">//`_demoBlock` = myBlock;</span></span><br><span class="line"> <span class="comment">// 正确的写法，调用 setter 方法，并且对 block 进行 copy</span></span><br><span class="line"> <span class="keyword">self</span>.demoBlock = myBlock;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.demoBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>MRC</code>下输出结果：会执行<code>copy</code>操作，从栈区拷贝到堆区</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:03:17.374375+0800 BlockDemo[1225:138257] &lt;__NSStackBlock__: 0x7ffee68509a8&gt;</span><br><span class="line">2018-05-10 12:03:17.374581+0800 BlockDemo[1225:138257] &lt;__NSMallocBlock__: 0x60000025dca0&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>下输出结果：不会执行<code>copy</code>操作,本身就在堆区</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:04:42.891691+0800 BlockDemo[1308:145791] &lt;__NSMallocBlock__: 0x6040002471d0&gt;</span><br><span class="line">2018-05-10 12:04:42.891902+0800 BlockDemo[1308:145791] &lt;__NSMallocBlock__: 0x6040002471d0&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注</strong> : 为了避免程序员的麻烦,在 ARC 中,定义了引用外部变量的 block,系统默认都是在堆区的!</p></blockquote><h2 id="copy关键字的探讨"><a href="#copy关键字的探讨" class="headerlink" title="copy关键字的探讨"></a>copy关键字的探讨</h2><h3 id="ARC-（为什么可以用copy-strong）"><a href="#ARC-（为什么可以用copy-strong）" class="headerlink" title="ARC （为什么可以用copy / strong）"></a>ARC （为什么可以用<code>copy / strong</code>）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)blockDemo</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span> (^task)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// ARC : 堆区 ==&gt; __NSMallocBlock__</span></span><br><span class="line"> <span class="comment">// ARC环境下,属性也是强引用,同时会copy</span></span><br><span class="line"> <span class="comment">// self.task = task;</span></span><br><span class="line"> <span class="comment">// ARC环境下,成员变量也是强引用,同时会copy</span></span><br><span class="line"> `_task` = task;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@"</span>,task,`_task`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:14:43.139413+0800 BlockDemo[3468:994925] &lt;__NSMallocBlock__: 0x60400024ea60&gt; -- &lt;__NSMallocBlock__: 0x60400024ea60&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结<br>在<code>ARC</code>环境下,上述block本来就保存在堆区,给属性赋值的时候,调用<code>setter</code>方法时,只会给一个引用.</p><blockquote><p><strong>注</strong> : 在<code>ARC</code>环境下,使用strong和copy的效果是一模一样的</p></blockquote></li></ul><h3 id="MRC（为什么必须用copy）"><a href="#MRC（为什么必须用copy）" class="headerlink" title="MRC（为什么必须用copy）"></a>MRC（为什么必须用<code>copy</code>）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)blockDemo</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span> (^task)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// MRC : 栈区 ==&gt; __NSStackBlock__</span></span><br><span class="line"> <span class="comment">// 这个赋值过程会copy,也会引用计数+1</span></span><br><span class="line"> <span class="comment">//    self.task = task;</span></span><br><span class="line"> <span class="comment">// 这个赋值过程不会copy,仅仅是引用计数+1,内存依然在栈区</span></span><br><span class="line"> `_task` = task;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@"</span>,task,`_task`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:17:25.352415+0800 BlockDemo[3528:1006735] &lt;__NSStackBlock__: 0x7ffee98cc9a8&gt; -- &lt;__NSStackBlock__: 0x7ffee98cc9a8&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>在<code>MRC</code>环境下,调用成员变量进行赋值,仅仅是引用计数加1;不会进行<code>copy</code>操作. 所以内存依然在栈区.</p></li></ul><h2 id="面试时如何回答？"><a href="#面试时如何回答？" class="headerlink" title="面试时如何回答？"></a>面试时如何回答？</h2><p>当Block被引入到OC时 ，OC仍是MRC的管理内存模式 ，在MRC管理模式中，Block处于栈区，超出作用域就会被销毁 ，如果用一个属性来全局的记录这个Block，就必须满足两个条件：<br>1.这个属性必须对Block强引用<br>2.需要把Block拷贝到堆区<br>要满足以上两个条件就需要使用<code>copy</code>修饰符</p><h1 id="Block的循环引用"><a href="#Block的循环引用" class="headerlink" title="Block的循环引用"></a>Block的循环引用</h1><h2 id="满足什么条件会出现循环应用"><a href="#满足什么条件会出现循环应用" class="headerlink" title="满足什么条件会出现循环应用"></a>满足什么条件会出现循环应用</h2><ul><li>block和外部变量<code>互相强引用</code>导致出现循环引用,内存不能正常释放</li><li><strong>坑</strong>：不要在Block的内部使用成员变量(<code>_name</code>)，而要尽量使用属性，因为看不到<code>self</code>字段，会造成如果出现循环引用不容易发现的问题.<blockquote><p><strong>注</strong>：不是所有的 self. 都会出现循环引用 —— block 执行完毕就销毁，例如 UIView 的动画代码</p></blockquote></li></ul><h2 id="如何解决循环引用"><a href="#如何解决循环引用" class="headerlink" title="如何解决循环引用"></a>如何解决循环引用</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 __weak 修饰符,定义一个弱引用的对象</span></span><br><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Apple 在iOS4.0之后推出Block，它本身封装了一段代码并可以将这段代码当做变量，参数，属性，数据类型，函数（匿名），代码块（只有
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Block" scheme="http://techbird.me/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIWebView&amp;JSContext&amp;WKWebView</title>
    <link href="http://techbird.me/2018/05/08/ios-uiwebview-and-jscontext-and-wkwebview/"/>
    <id>http://techbird.me/2018/05/08/ios-uiwebview-and-jscontext-and-wkwebview/</id>
    <published>2018-05-08T09:33:53.000Z</published>
    <updated>2018-05-08T11:05:09.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h1><blockquote><p>A view that embeds web content in your app.</p></blockquote><h2 id="UIWebView-的JS注入"><a href="#UIWebView-的JS注入" class="headerlink" title="UIWebView 的JS注入"></a>UIWebView 的JS注入</h2><blockquote><p>案例 : 移除网页的某些不需要展示的标签</p></blockquote><ul><li>准备网页地址 : <a href="http://m.dianping.com/tuan/deal/5501525" target="_blank" rel="noopener">http://m.dianping.com/tuan/deal/5501525</a></li></ul><h3 id="浏览器终端中演示JS代码删除网页中元素"><a href="#浏览器终端中演示JS代码删除网页中元素" class="headerlink" title="浏览器终端中演示JS代码删除网页中元素"></a>浏览器终端中演示JS代码删除网页中元素</h3><ul><li>需要处理的网页<br><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180508-174926.png" alt=""></li></ul><hr><ul><li><p>网页处理的步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以删除导航为例 :</span><br><span class="line">  <span class="number">1.</span>先找到该节点 : <span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="number">2.</span>再找到父节点 : headerTag.parentNode</span><br><span class="line">  <span class="number">3.</span>最后用它的父节点删除该节点 : headerTag.parentNode.removeChild(headerTag);</span><br><span class="line"></span><br><span class="line">  合并: <span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];headerTag.parentNode.removeChild(headerTag);</span><br></pre></td></tr></table></figure></li><li><p>删除导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];headerTag.parentNode.removeChild(headerTag);</span><br></pre></td></tr></table></figure></li><li><p>删除底部悬停按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> footerBtnTag = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'footer-btn-fix'</span>)[<span class="number">0</span>]; footerBtnTag.parentNode.removeChild(footerBtnTag);</span><br></pre></td></tr></table></figure></li><li><p>删除底部布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> footerTag = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'footer'</span>)[<span class="number">0</span>]; footerTag.parentNode.removeChild(footerTag);</span><br></pre></td></tr></table></figure></li><li><p>处理之后的网页<br><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180508-175123.png" alt=""></p></li></ul><hr><h3 id="OC调用JS-实现-JS注入"><a href="#OC调用JS-实现-JS注入" class="headerlink" title="OC调用JS 实现 JS注入"></a>OC调用JS 实现 JS注入</h3><blockquote><p>OC和JS的交互需要使用UIWebView的代理方法作为桥梁实现</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:URL]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>网页加载完时调用的代理方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * ) webView;</span><br></pre></td></tr></table></figure></li><li><p>网页加载完成之后,调用JS代码的OC方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> * )stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> * )script;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JS注入的具体实现"><a href="#JS注入的具体实现" class="headerlink" title="JS注入的具体实现"></a>JS注入的具体实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView stringByEvaluatingJavaScriptFromString:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIWebView监听网页标签的点击-JS调用OC"><a href="#UIWebView监听网页标签的点击-JS调用OC" class="headerlink" title="UIWebView监听网页标签的点击(JS调用OC)"></a>UIWebView监听网页标签的点击(JS调用OC)</h2><blockquote><p>案例 : 点击网页某个标签跳转到苹果原生控制器<br>核心思想 : 拦截webView上所有的网络请求</p></blockquote><h3 id="JS调用OC需要实现的代理方法"><a href="#JS调用OC需要实现的代理方法" class="headerlink" title="JS调用OC需要实现的代理方法"></a>JS调用OC需要实现的代理方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>) webView:(<span class="built_in">UIWebView</span> * )webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> * )request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</span><br></pre></td></tr></table></figure><h3 id="JS注入给标签添加点击事件"><a href="#JS注入给标签添加点击事件" class="headerlink" title="JS注入给标签添加点击事件"></a>JS注入给标签添加点击事件</h3><ul><li><p>网页标签添加点击事件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br></pre></td></tr></table></figure></li><li><p>标签的点击事件注入到JS</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给标签添加点击事件</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView stringByEvaluatingJavaScriptFromString:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>给标签添加点击事件的目的 : 使标签可点击</li><li>点击事件发送网络请求的目的 : 可以拦截到标签的点击事件</li><li>自定义协议的目的 : 给事件设计一个特殊的标记,如果拦截到请求,就通过特殊的标记来区别要做的事情</li></ul></blockquote><h3 id="拦截webView上所有的网络请求-筛选请求"><a href="#拦截webView上所有的网络请求-筛选请求" class="headerlink" title="拦截webView上所有的网络请求,筛选请求"></a>拦截webView上所有的网络请求,筛选请求</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1.JS与OC交互的桥梁</span></span><br><span class="line"><span class="comment"> 2.可以拦截webView上所有的请求</span></span><br><span class="line"><span class="comment"> 3.给标签添加点击事件,点击事件主要就是发送请求;发送的请求是自定义协议的,目的是为了做标记.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> * )webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> * )request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,request.URL.absoluteString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到网页的请求地址</span></span><br><span class="line"><span class="built_in">NSString</span> * URLString = request.URL.absoluteString;</span><br><span class="line"><span class="comment">// 判断网页的请求地址协议是否是我们自定义的那个</span></span><br><span class="line"><span class="built_in">NSRange</span> range = [URLString rangeOfString:<span class="string">@"custom://techbird.me"</span>];</span><br><span class="line"><span class="keyword">if</span> (range.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 点击网页中的图片,实现OC原生界面的跳转</span></span><br><span class="line">TestViewController * VC = [[TestViewController alloc] init];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:VC animated:<span class="literal">YES</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h1><p>JSContext是JavaScript的运行上下文，他主要作用是执行js代码和注册native方法接口</p><h2 id="JSContexts实现OC与JS交互"><a href="#JSContexts实现OC与JS交互" class="headerlink" title="JSContexts实现OC与JS交互"></a>JSContexts实现OC与JS交互</h2><ul><li>获取上下文<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用JSContext-实现-JS调用OC"><a href="#使用JSContext-实现-JS调用OC" class="headerlink" title="使用JSContext 实现 JS调用OC"></a>使用JSContext 实现 JS调用OC</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>]];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line"><span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上下文</span></span><br><span class="line">JSContext * context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line"><span class="comment">// 监听图片标签点击</span></span><br><span class="line">context[<span class="string">@"imgtag"</span>] = ^ &#123;</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[TestViewController new] animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 监听购买标签点击</span></span><br><span class="line">context[<span class="string">@"buytag"</span>] = ^ &#123;</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[Test1ViewController new] animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JSContext-实现-JS注入"><a href="#使用JSContext-实现-JS注入" class="headerlink" title="使用JSContext 实现 JS注入"></a>使用JSContext 实现 JS注入</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拿到JS的上下文</span></span><br><span class="line">JSContext * context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用JS的函数,还可以向函数里面传入需要的参数.在XCode中向JS中的alert传入需要的message</span></span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给图片标签添加点击事件 : 自定义协议</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function imgtagclick() &#123;imgtag();&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给以过期的购买标签重新添加点击事件</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var buyBtnTag = document.getElementsByClassName('buy-btn btn-gray')[0]; buyBtnTag.onclick = function buybtnclick() &#123;buytag();&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行这个JS代码</span></span><br><span class="line">[context evaluateScript:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h1><blockquote><p>Starting in iOS 8.0 and OS X 10.10, use WKWebView to add web content to your app. Do not use UIWebView or WebView.</p></blockquote><h2 id="WKWebView的OC和JS交互"><a href="#WKWebView的OC和JS交互" class="headerlink" title="WKWebView的OC和JS交互"></a>WKWebView的OC和JS交互</h2><ul><li><p>使用前导入头文件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;WebKit/WebKit.h&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>遵守代理协议</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.navigationDelegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代理方法介绍"><a href="#代理方法介绍" class="headerlink" title="代理方法介绍"></a>代理方法介绍</h3><ul><li><p>面即将开始加载时调用 (拦截网页的网络请求 : JS调用OC)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure></li><li><p>页面开始加载时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didStartProvisionalNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>收到响应后,决定是否跳转,即是否把这个链接对应的网页加载到WKWebView上</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> * )navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure></li><li><p>当内容开始返回时调用,即服务器已经在向客户端发送网页数据</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didCommitNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>页面加载完成之后调用 (OC调用JS : JS注入)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFinishNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>页面加载失败时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFailProvisionalNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li></ul><h3 id="准备WKWebView"><a href="#准备WKWebView" class="headerlink" title="准备WKWebView"></a>准备WKWebView</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WKWebView</span></span><br><span class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">webView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="keyword">self</span>.webView = webView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载的网页</span></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OC调用JS-JS注入-类似UIWebView"><a href="#OC调用JS-JS注入-类似UIWebView" class="headerlink" title="OC调用JS : JS注入 (类似UIWebView)"></a>OC调用JS : JS注入 (类似UIWebView)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载完成之后调用</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFinishNavigation:(<span class="built_in">WKNavigation</span> * )navigation</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给标签添加点击事件 : 自定义协议</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView evaluateJavaScript:JSStringM completionHandler:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS调用OC-类似UIWebView"><a href="#JS调用OC-类似UIWebView" class="headerlink" title="JS调用OC : (类似UIWebView)"></a>JS调用OC : (类似UIWebView)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在发送请求之前，决定是否跳转</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"在发送请求之前，决定是否跳转 decidePolicyForNavigationAction"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> * URLString = navigationAction.request.URL.absoluteString;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"监测到的WKWebView上的请求 %@"</span>,URLString);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSRange</span> range = [URLString rangeOfString:<span class="string">@"custom://"</span>];</span><br><span class="line"><span class="keyword">if</span> (range.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[[TestViewController alloc] init] animated:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许跳转,即不加载这个链接对应的内容</span></span><br><span class="line">decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 允许跳转,即加载这个链接对应的内容</span></span><br><span class="line">decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WKWebView-监听加载进度"><a href="#WKWebView-监听加载进度" class="headerlink" title="WKWebView 监听加载进度"></a>WKWebView 监听加载进度</h2><h3 id="初始化WKWebView和进度条"><a href="#初始化WKWebView和进度条" class="headerlink" title="初始化WKWebView和进度条"></a>初始化WKWebView和进度条</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建进度条</span></span><br><span class="line"><span class="keyword">self</span>.progress = [[<span class="built_in">UIProgressView</span> alloc] init];</span><br><span class="line"><span class="keyword">self</span>.progress.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">10</span>);</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.progress];</span><br><span class="line"><span class="keyword">self</span>.progress.progress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WKWebView</span></span><br><span class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">webView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="keyword">self</span>.webView = webView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载的网页</span></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line"></span><br><span class="line"><span class="comment">// KVO添加进度监听</span></span><br><span class="line">[webView addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"estimatedProgress"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KVO监听进度"><a href="#KVO监听进度" class="headerlink" title="KVO监听进度"></a>KVO监听进度</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> * )keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span> * )change context:(<span class="keyword">void</span> * )context &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (object == <span class="keyword">self</span>.webView &amp;&amp; [keyPath isEqualToString:<span class="string">@"estimatedProgress"</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> newprogress = [[change objectForKey:<span class="built_in">NSKeyValueChangeNewKey</span>] doubleValue];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"进度 %f"</span>,newprogress);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newprogress != <span class="number">1.000000</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网页加载时就展示进度</span></span><br><span class="line"><span class="keyword">self</span>.progress.hidden = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">self</span>.progress.progress = newprogress;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 网页加载完成就进度</span></span><br><span class="line"><span class="keyword">self</span>.progress.hidden = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WKWebView-其他"><a href="#WKWebView-其他" class="headerlink" title="WKWebView 其他"></a>WKWebView 其他</h2><h3 id="WKUIDelegate"><a href="#WKUIDelegate" class="headerlink" title="WKUIDelegate"></a>WKUIDelegate</h3><ul><li><p>创建一个新的WebView</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">WKWebView</span> * )webView:(<span class="built_in">WKWebView</span> * )webView createWebViewWithConfiguration:(<span class="built_in">WKWebViewConfiguration</span> * )configuration forNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction windowFeatures:(<span class="built_in">WKWindowFeatures</span> * )windowFeatures;</span><br></pre></td></tr></table></figure></li><li><p>弹出警告的提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出警告的提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           警告框中的内容</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> * )message initiatedByFrame:(<span class="keyword">void</span> (^)())completionHandler;</span><br></pre></td></tr></table></figure></li><li><p>弹出确认的提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出确认的提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           确认框中的内容</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptConfirmPanelWithMessage:(<span class="built_in">NSString</span> * )message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> * )frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> result))completionHandler;</span><br></pre></td></tr></table></figure></li><li><p>弹出输入提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出输入提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           确认框中的内容</span></span><br><span class="line"><span class="comment"> *  @param defaultText       默认的输入框文本信息</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptTextInputPanelWithPrompt:(<span class="built_in">NSString</span> * )prompt defaultText:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> * )defaultText initiatedByFrame:(<span class="built_in">WKFrameInfo</span> * )frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> * __<span class="keyword">nullable</span> result))completionHandler;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Bug-Tips"><a href="#Bug-Tips" class="headerlink" title="Bug Tips"></a>Bug Tips</h3><p><a href="https://github.com/ShingoFukuyama/WKWebViewTips" target="_blank" rel="noopener">https://github.com/ShingoFukuyama/WKWebViewTips</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UIWebView&quot;&gt;&lt;a href=&quot;#UIWebView&quot; class=&quot;headerlink&quot; title=&quot;UIWebView&quot;&gt;&lt;/a&gt;UIWebView&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A view that embeds web conten
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="WebView" scheme="http://techbird.me/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Xcode-代码片段Code Snippets</title>
    <link href="http://techbird.me/2018/05/08/xcode-code-snippets/"/>
    <id>http://techbird.me/2018/05/08/xcode-code-snippets/</id>
    <published>2018-05-08T02:01:47.000Z</published>
    <updated>2018-05-08T02:11:57.515Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS开发过程中，经常会用到一些相似的代码。我们可以将这些代码保存起来，在使用的时候直接从Code Snippets拖拽代码块到指定的位置，也可以设置一些快捷方式来调用Xcode代码片段。</p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><ul><li>例如编写以下代码片段<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) &lt;<span class="meta">#Type#&gt; *<span class="meta-string">&lt;#value#&gt;</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p>&lt;##&gt; 作用是占位，## 之间可以输入提示文字。</p><ul><li>使用快捷键：command+option+0</li><li><p>将上述代码片段拖拽到下图所示区域<br>  <img src="http://p7xd6yrmx.bkt.clouddn.com/code%20snippets.png" alt=""></p><blockquote><p><strong>小技巧</strong>：用鼠标选中代码块后把光标放在所选代码块上点击长按2-3秒(光标会由插入标变为小箭头状态)就可以拖拽了</p></blockquote></li><li><p>弹出下图<br>  <img src="http://p7xd6yrmx.bkt.clouddn.com/code%20snippet%20dialog.png" alt=""></p><blockquote><p>Title：标题<br>Summary：描述<br>Platform：可以使用的平台<br>Language：可以在哪些语言中使用<br>Completion Shortcut：快捷方式（例如：@xs）。<br>Completion Scopes：作用范围</p></blockquote></li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>对代码片段进行修改，选中代码片段，点击edit即可。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>对代码片段进行删除，选中代码片段，按delete键即可。</p><h2 id="Git管理"><a href="#Git管理" class="headerlink" title="Git管理"></a>Git管理</h2><p>为了方便在更换电脑后可以更快速的使用自己的代码块，可以托管在Github上进行管理，这样在家里和公司两台Mac任何一端有了更新，另一端随时都可以pull一下使用了。</p><h3 id="Xcode中代码片段默认的目录："><a href="#Xcode中代码片段默认的目录：" class="headerlink" title="Xcode中代码片段默认的目录："></a>Xcode中代码片段默认的目录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Developer/Xcode/UserData/CodeSnippets</span><br></pre></td></tr></table></figure><h3 id="同步代码片段"><a href="#同步代码片段" class="headerlink" title="同步代码片段"></a>同步代码片段</h3><p>上述目录设置成一个 Git 的版本库，将代码片段放到 Github 上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在iOS开发过程中，经常会用到一些相似的代码。我们可以将这些代码保存起来，在使用的时候直接从Code Snippets拖拽代码块到指定的位置，也可以设置一些快捷方式来调用Xcode代码片段。&lt;/p&gt;
&lt;h2 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Xcode" scheme="http://techbird.me/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://techbird.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSURLRequest&amp;NSURLResponse</title>
    <link href="http://techbird.me/2018/05/02/ios-nsurlrequest-and-nsurlresponse/"/>
    <id>http://techbird.me/2018/05/02/ios-nsurlrequest-and-nsurlresponse/</id>
    <published>2018-05-02T14:30:51.000Z</published>
    <updated>2018-05-10T04:29:05.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p7xd6yrmx.bkt.clouddn.com/HTTP%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png" alt=""></p><h2 id="NSURLRequest"><a href="#NSURLRequest" class="headerlink" title="NSURLRequest"></a>NSURLRequest</h2><h3 id="创建请求对象-缓存策略和超时时长都是默认的"><a href="#创建请求对象-缓存策略和超时时长都是默认的" class="headerlink" title="创建请求对象 (缓存策略和超时时长都是默认的)"></a>创建请求对象 (缓存策略和超时时长都是默认的)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br></pre></td></tr></table></figure><h3 id="创建请求对象的同时指定缓存策略和超时时长"><a href="#创建请求对象的同时指定缓存策略和超时时长" class="headerlink" title="创建请求对象的同时指定缓存策略和超时时长"></a>创建请求对象的同时指定缓存策略和超时时长</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:url cachePolicy:<span class="number">0</span> timeoutInterval:<span class="number">15</span>];</span><br></pre></td></tr></table></figure><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><table><thead><tr><th>枚举</th><th>数值</th><th>说明</th></tr></thead><tbody><tr><td><code>NSURLRequestUseProtocolCachePolicy</code></td><td>0</td><td>默认的缓存策略</td></tr><tr><td><code>NSURLRequestReloadIgnoringLocalCacheData</code></td><td>1</td><td><ul><li>忽略本地缓存数据，始终加载服务器的数据</li><li>对数据的及时性要求高的应用</li></ul></td></tr><tr><td><code>NSURLRequestReturnCacheDataElseLoad</code></td><td>2</td><td>如果有缓存，就返回缓存，否则加载最新数据</td></tr><tr><td><code>NSURLRequestReturnCacheDataDontLoad</code></td><td>3</td><td>只加载缓存数据,不去服务器上获取(离线地图)</td></tr></tbody></table><h3 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h3><ul><li>默认网络时长是 <code>60 s</code><blockquote><p><code>SDWebImage</code> 的默认超时时长是 <code>15</code> 秒<br><code>AFN</code> 的默认超时时长是 <code>60</code> 秒</p></blockquote></li></ul><h3 id="NSMutableURLRequest（可变请求）"><a href="#NSMutableURLRequest（可变请求）" class="headerlink" title="NSMutableURLRequest（可变请求）"></a>NSMutableURLRequest（可变请求）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可变的请求对象才能设置额外的信息</span></span><br><span class="line"><span class="built_in">NSMutableURLRequest</span> *requestM = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url cachePolicy:<span class="number">0</span> timeoutInterval:<span class="number">15</span>];</span><br><span class="line"><span class="comment">// 设置请求头 : 告诉服务器,我的设备是iphone</span></span><br><span class="line">[requestM setValue:<span class="string">@"iphone AppleWebKit"</span> forHTTPHeaderField:<span class="string">@"User-Agent"</span>];</span><br></pre></td></tr></table></figure><h2 id="NSURLResponse"><a href="#NSURLResponse" class="headerlink" title="NSURLResponse"></a>NSURLResponse</h2><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><table><thead><tr><th>响应属性</th><th>说明</th></tr></thead><tbody><tr><td><code>URL</code></td><td>服务器反馈的 URL，有的时候，服务器会重定向新的 URL</td></tr><tr><td><code>MIMEType</code></td><td><ul><li>服务器告诉客户端，返回的二进制数据的类型（纯文本，视频，语音，超文本等）</li><li><code>ContentType</code></li><li>根据 MIMEType 客户端就知道使用什么软件处理返回的二进制数据</li></ul></td></tr><tr><td><code>statusCode</code></td><td>状态码<br><ul><li>1XX消息</li><li>2XX 成功</li><li>3XX 更多选择</li><li>4XX 客户端错误</li><li>5XX 服务器错误</li></ul></td></tr><tr><td><code>expectedContentLength</code></td><td>数据长度，下载文件总长度</td></tr><tr><td><code>suggestedFilename</code></td><td>获取服务器的文件的名称</td></tr><tr><td><code>allHeaderFields</code></td><td>返回数据的头部信息，key－value格式</td></tr><tr><td><code>textEncodingName</code></td><td>编码的名称</td></tr></tbody></table><h3 id="响应体-data"><a href="#响应体-data" class="headerlink" title="响应体 data"></a>响应体 data</h3><ul><li><code>data</code> 服务器返回的二进制数据，程序员最关心的内容</li><li>拿到响应体之后,无法直接使用,需要进行反序列化,转换成OC对象.</li></ul><h2 id="GET请求-URL中有中文时如何处理？"><a href="#GET请求-URL中有中文时如何处理？" class="headerlink" title="GET请求 URL中有中文时如何处理？"></a>GET请求 URL中有中文时如何处理？</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * URLString = [URLString stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet]];</span><br></pre></td></tr></table></figure><blockquote><p>注意：GET请求时,问号<code>?</code>后面的查询字符串里面不能有中文或者空格.如果有就需要使用%转义,不然URL会为nil. POST请求时,请求体里面可以有中文.<br>URLQueryAllowedCharacterSet : 百分号转义查询字符串</p></blockquote><h2 id="URL转字符串的方法"><a href="#URL转字符串的方法" class="headerlink" title="URL转字符串的方法"></a>URL转字符串的方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[filePath.path / filePath.absoluteString]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p7xd6yrmx.bkt.clouddn.com/HTTP%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;NSURLRequest&quot;&gt;&lt;a href=&quot;#NSUR
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="NSURLRequest" scheme="http://techbird.me/tags/NSURLRequest/"/>
    
      <category term="NSURLResponse" scheme="http://techbird.me/tags/NSURLResponse/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSURLSession</title>
    <link href="http://techbird.me/2018/04/29/ios-network-nsurlsession/"/>
    <id>http://techbird.me/2018/04/29/ios-network-nsurlsession/</id>
    <published>2018-04-29T11:31:42.000Z</published>
    <updated>2018-05-10T04:28:58.396Z</updated>
    
    <content type="html"><![CDATA[<p>Apple在 iOS9.0 之后已经放弃了 NSURLConnection，所以在现在的实际开发中，一般使用的是 iOS7.0 之后推出的 NSURLSession。NSURLSession 和 NSURLConnection 都提供了与各种协议，诸如 HTTP 和 HTTPS 进行交互的API。会话对象（NSURLSession 类对象）就是用于管理这种交互过程。它是一个高度可配置的容器，通过使用其提供的API，可进行细粒度的管理控制。它提供了在 NSURLConnection 中的所有特性，此外，它还可以实现 NSURLConnection 不能完成的任务，例如实现私密浏览。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.158bd84a0f3f4822a513d7866930dfe8.png" alt=""></p><h2 id="NSURLSession发送网络请求"><a href="#NSURLSession发送网络请求" class="headerlink" title="NSURLSession发送网络请求"></a>NSURLSession发送网络请求</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.baidu.com"</span>];</span><br><span class="line">    <span class="built_in">NSURLSession</span> * session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line"><span class="built_in">NSURLSessionDataTask</span> * dataTask = [session dataTaskWithURL:URL completionHandler:^(<span class="built_in">NSData</span> * data, <span class="built_in">NSURLResponse</span> * response, <span class="built_in">NSError</span> * error) &#123;</span><br><span class="line"> <span class="comment">// data : 响应体; response : 响应头; error : 错误信息</span></span><br><span class="line"> <span class="keyword">if</span> (error == <span class="literal">nil</span> &amp;&amp; data != <span class="literal">nil</span>)&#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@ -- %@"</span>,response,data,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;];</span><br><span class="line">   [dataTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML字符串反序列化"><a href="#HTML字符串反序列化" class="headerlink" title="HTML字符串反序列化"></a>HTML字符串反序列化</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="comment">// 反序列化HTML字符串</span></span><br><span class="line"><span class="built_in">NSString</span> * html = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="comment">// 展示HTML字符串</span></span><br><span class="line">[<span class="keyword">self</span>.webView loadHTMLString:html baseURL:URL];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>为了方便程序员使用，NSURLSession提供了一个全局单例 session.</li><li>所有的 任务(Task) 都是由 session 发起的.</li><li>所有的任务默认是挂起的，需要 resume.</li><li>完成回调是异步的</li><li>session可以自定义,自定义的时候可以同时设置代理.<blockquote><p>AFNetworing 底层其实就是对 NSURLSession 的封装</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apple在 iOS9.0 之后已经放弃了 NSURLConnection，所以在现在的实际开发中，一般使用的是 iOS7.0 之后推出的 NSURLSession。NSURLSession 和 NSURLConnection 都提供了与各种协议，诸如 HTTP 和 HTT
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="NSURLSession" scheme="http://techbird.me/tags/NSURLSession/"/>
    
  </entry>
  
  <entry>
    <title>iOS-网络基础&amp;Http和Https</title>
    <link href="http://techbird.me/2018/04/29/ios-networkbase-http-and-https/"/>
    <id>http://techbird.me/2018/04/29/ios-networkbase-http-and-https/</id>
    <published>2018-04-29T09:29:30.000Z</published>
    <updated>2018-05-10T04:26:14.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP：Hyper Text Transfer Protocol（超文本传输协议）的缩写，HTTP是一个基于TCP/IP通信协议来传递数据，默认端口号为80,是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"></span><br><span class="line">（这里是请求数据）</span><br></pre></td></tr></table></figure><ul><li>第一部分：第一行是请求行（request line）</li><li>第二部分：请求头（header），用来说明服务器要使用的附加信息</li><li>第三部分：空行，请求头后面的空行是<code>必须</code>的</li><li>第四部分：请求数据也叫主体，可以添加任意数据</li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><ul><li>第一部分：请求行，第一行是post请求，以及http1.1版本。</li><li>第二部分：请求头部，第二行至第六行。</li><li>第三部分：空行，第七行的空行。</li><li>第四部分：请求数据，第八行。</li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ul><li>GET请求的数据会附在URL之后显示出来（数据放置在http协议头中）而POST把提交的数据放置在是HTTP包的包体中</li><li>传输数据的大小：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。但GET请求时特定浏览器和服务器对URL长度有限制（eg:IE限制2083个字节,2k+35）</li><li>安全性：POST的安全性要比GET的安全性高（GET提交时，用户名密码会明文出现在URL上）</li></ul><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 April 2018 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body goes here--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</li><li>第二部分：消息报头，用来说明客户端要使用的一些附加信息</li><li>第三部分：空行，消息报头后面的空行是必须的</li><li>第四部分：响应正文，服务器返回给客户端的文本信息。</li></ul><h2 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h2><ul><li>1xx：指示信息–表示请求已接收，继续处理</li><li>2xx：成功–表示请求已被成功接收、理解、接受</li><li>3xx：重定向–要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误–请求有语法错误或请求无法实现</li><li>5xx：服务器端错误–服务器未能实现合法的请求</li></ul><h2 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h2><h3 id="IP地址（主机名）"><a href="#IP地址（主机名）" class="headerlink" title="IP地址（主机名）"></a>IP地址（主机名）</h3><ul><li>网络中设备的标示</li><li>本地回环地址：127.0.0.1 主机名：localhost</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul><li>用于标示进程的逻辑地址，不同进程的标示</li><li>有效端口：<code>0-65535</code></li><li>其中 <code>0-1024</code>由系统使用或者保留端口，开发中不要使用 1024 以下的端口</li><li><strong>注意</strong> : 跟HTTP相关的端口一定是80.服务器上有个进程是专门处理HTTP请求的,端口号是80.处理HTTPS请求的端口号是443.</li></ul><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><ul><li><p>UDP(数据报文协议)</p><ul><li>只管发送，不确认对方是否接收到</li><li>将数据源和目的封装成数据包中，不需要建立连接</li><li>每个数据报的大小限制在64K之内</li><li>因为无需连接，因此是不可靠协议</li><li>不需要建立连接，速度快</li><li>应用场景：多媒体教室／网络流媒体 / 视频实时共享</li><li>当视频共享时,出现卡屏,就是因为UDP协议在传递数据时出现丢包.</li></ul></li><li><p>TCP(传输控制协议)</p><ul><li>建立连接，形成传输数据的通道</li><li>在连接中进行大数据传输（数据大小不受限制）</li><li>通过三次握手完成连接，是可靠协议</li><li>必须建立连接，效率会稍低</li><li>TCP协议的传输速度比UDP协议慢</li></ul></li></ul><h3 id="三次握手的描述"><a href="#三次握手的描述" class="headerlink" title="三次握手的描述"></a>三次握手的描述</h3><ul><li>图解：<img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.87a614095854472c81c8ac1a969ffa72.png" alt=""></li><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li><li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</li></ul><h3 id="注："><a href="#注：" class="headerlink" title="注："></a><strong>注：</strong></h3><blockquote><p>通过 IP 找机器，通过 端口 找程序，通过 协议 确定如何传输数据</p></blockquote><h2 id="TCP-IP网络参考模型"><a href="#TCP-IP网络参考模型" class="headerlink" title="TCP/IP网络参考模型"></a>TCP/IP网络参考模型</h2><h3 id="网络模型（理论）"><a href="#网络模型（理论）" class="headerlink" title="网络模型（理论）"></a>网络模型（理论）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.2ea00009b0c74a25b976747621d72639.png" alt=""></p><h3 id="网络参考模型（现实）"><a href="#网络参考模型（现实）" class="headerlink" title="网络参考模型（现实）"></a>网络参考模型（现实）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.aea23a46d7d24e29a2571d783d322731.png" alt=""></p><h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.0d002381b3764feb871651ff7c1cb40e.png" alt=""></p><ul><li>应用层 : APP</li><li>传输层 : TCP,确定数据如何传输</li><li>网络层 : 确定目标计算机的IP地址</li><li>链路层 : 硬件,添加帧头帧尾<blockquote><p>HTTP网络传输协议在传输层选择的是TCP/IP协议</p></blockquote></li></ul><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><ul><li>HTTPS : Hyper Text Transfer Protocol over Secure Socket Layer,是以安全为目标的HTTP通道,简单讲是HTTP的安全版.即HTTP下加入SSL层,HTTPS的安全基础是SSL.</li><li>SSL : Secure Sockets Layer,表示安全套接层.</li><li>TLS : Transport Layer Security,是SSL的继任者,表示传输层安全.</li><li>SSL与TLS是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密.<br><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.83f8b9a805764efbb13d72ef85ddf51a.png" alt=""></li></ul><h2 id="HTTPS加密原理"><a href="#HTTPS加密原理" class="headerlink" title="HTTPS加密原理"></a>HTTPS加密原理</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.99e36c340e94445f87a441f0f2c85f97.png" alt=""></p><h2 id="加密科普（对称，非对称，散列-）"><a href="#加密科普（对称，非对称，散列-）" class="headerlink" title="加密科普（对称，非对称，散列 ）"></a>加密科普（对称，非对称，散列 ）</h2><p>HTTPS一般使用的加密与HASH算法如下：<br>非对称加密算法：RSA，DSA/DSS<br>对称加密算法：AES，RC4，3DES<br>HASH算法：MD5，SHA1，SHA256<br>其中非对称加密算法用于在握手过程中加密生成的密码，对称加密算法用于对真正传输的数据进行加密，而HASH算法用于验证数据的完整性。由于浏览器生成的密码是整个数据加密的关键，因此在传输的时候使用了非对称加密算法对其加密。非对称加密算法会生成公钥和私钥，公钥只能用于加密数据，因此可以随意传输，而网站的私钥用于对数据进行解密，所以网站都会非常小心的保管自己的私钥，防止泄漏。</p><h2 id="小结（面试时如何回答"><a href="#小结（面试时如何回答" class="headerlink" title="小结（面试时如何回答)"></a>小结（面试时如何回答)</h2><ul><li>HTTP就是一个用文本格式描述报文头并用双换行分隔报文头和内容，在TCP基础上实现的请求-响应模式的双向通信协议。</li><li>HTTPS并不是一个单独的协议，是对工作在一个加密连接（SSL/TLS) 上的常规HTTP协议。通过在TCP和HTTP之间加入TLS（Transport Layer Security）来加密。</li><li>SSL/TLS协议加密会使传输速度会变慢，更耗资源，但是更安全</li></ul><p>相关文章：</p><ol><li><a href="https://www.cnblogs.com/Yfling/p/6670495.html" target="_blank" rel="noopener">https://www.cnblogs.com/Yfling/p/6670495.html</a></li><li><a href="http://fullstack.blog/2017/03/12/%E4%B9%9D%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E6%82%89HTTPS/#BS-%E5%88%A9%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">http://fullstack.blog/2017/03/12/%E4%B9%9D%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E6%82%89HTTPS/#BS-%E5%88%A9%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;p&gt;HTTP：Hyper Text Transfer Protocol（超文本传输协议）的缩写，HTTP是一个基于TCP/IP通
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="Http" scheme="http://techbird.me/tags/Http/"/>
    
      <category term="Https" scheme="http://techbird.me/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之NSOperation</title>
    <link href="http://techbird.me/2018/04/29/ios-thread-nsoperation/"/>
    <id>http://techbird.me/2018/04/29/ios-thread-nsoperation/</id>
    <published>2018-04-29T09:14:05.000Z</published>
    <updated>2018-05-10T04:29:14.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规写法"><a href="#常规写法" class="headerlink" title="常规写法"></a>常规写法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo&#123;</span><br><span class="line"><span class="comment">//创建队列:默认就是并发队列</span></span><br><span class="line">  <span class="built_in">NSOperationQueue</span> * queue = [<span class="built_in">NSOperationQueue</span> new];</span><br><span class="line"><span class="comment">//创建操作:默认就是异步任务</span></span><br><span class="line"><span class="built_in">NSBlockOperation</span> * operation = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//将操作添加到队列</span></span><br><span class="line">[queue addOperation:operation];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo2&#123;</span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> new] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程间通讯"><a href="#线程间通讯" class="headerlink" title="线程间通讯"></a>线程间通讯</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo3&#123;</span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> new] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"consuming time：%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"><span class="comment">/// 回到主线程刷新UI</span></span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"refresh ui: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规写法&quot;&gt;&lt;a href=&quot;#常规写法&quot; class=&quot;headerlink&quot; title=&quot;常规写法&quot;&gt;&lt;/a&gt;常规写法&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="NSOperation" scheme="http://techbird.me/tags/NSOperation/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之GCD</title>
    <link href="http://techbird.me/2018/04/29/ios-thread-gcd/"/>
    <id>http://techbird.me/2018/04/29/ios-thread-gcd/</id>
    <published>2018-04-29T07:59:59.000Z</published>
    <updated>2018-05-10T04:29:10.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD与-NSThread-的对比"><a href="#GCD与-NSThread-的对比" class="headerlink" title="GCD与 NSThread 的对比"></a>GCD与 NSThread 的对比</h2><h3 id="NSThread的劣势"><a href="#NSThread的劣势" class="headerlink" title="NSThread的劣势"></a>NSThread的劣势</h3><ul><li>如果要开多个线程 NSThread 必须实例化多个线程对象</li><li>NSThread 靠 NSObject 的分类方法实现的线程间通讯，GCD依靠 block 实现</li></ul><h3 id="GCD的优势"><a href="#GCD的优势" class="headerlink" title="GCD的优势"></a>GCD的优势</h3><ul><li>让代码更加简单，易于阅读和维护</li><li>使用GCD 不需要管理线程的创建/销毁/复用的过程，不用关心线程的生命周期</li><li>GCD会充分利用CPU的内核</li></ul><h2 id="队列有哪些，任务有几种"><a href="#队列有哪些，任务有几种" class="headerlink" title="队列有哪些，任务有几种"></a>队列有哪些，任务有几种</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>串行队列（Serial Dispatch Queue）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure></li><li><p>并行队列（Concurrent Dispatch Queue）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li><p>同步任务（sync）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li><li><p>异步任务（async）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li></ul><h2 id="写一个死锁程序"><a href="#写一个死锁程序" class="headerlink" title="写一个死锁程序"></a>写一个死锁程序</h2><ul><li><p>主队列+同步任务 = 死锁</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>)deadlockDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start”);</span></span><br><span class="line"><span class="string">dispatch_sync(queue, ^&#123;</span></span><br><span class="line"><span class="string">NSLog(@"</span>excuting...%<span class="string">@",[NSThread currentThread]);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">NSLog(@"</span>end<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>死锁解决办法：主队列中的同步任务放进子线程中，不使其阻塞主线程</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>)resolveDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_queue_create(<span class="string">"flag"</span>, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"excuting...%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列的两个参数分别代表什么？"><a href="#全局队列的两个参数分别代表什么？" class="headerlink" title="全局队列的两个参数分别代表什么？"></a>全局队列的两个参数分别代表什么？</h2><ul><li>参数1：服务质量(队列对任务调度的优先级)/iOS 7.0 之前，是优先级，传入<code>0</code>在所有系统上使用默认设置</li><li>参数2：预留参数，以便于扩展，一般传入<code>0</code></li><li><strong>小结</strong>：如果要适配 iOS 7.0 &amp; 8.0，需要使用以下代码：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列和并发队列的区别"><a href="#全局队列和并发队列的区别" class="headerlink" title="全局队列和并发队列的区别"></a>全局队列和并发队列的区别</h2><h3 id="全局队列"><a href="#全局队列" class="headerlink" title="全局队列"></a>全局队列</h3><ul><li>没有名称</li><li>无论MRC &amp; ARC都不需要考虑释放</li></ul><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><ul><li>有名称，和 NSThread 的 name 属性作用类似</li><li>如果在 <code>MRC</code> 开发时,需要使用 <code>dispatch_release(q);</code> 释放相应的对象</li></ul><h3 id="队列和任务组合总结"><a href="#队列和任务组合总结" class="headerlink" title="队列和任务组合总结"></a>队列和任务组合总结</h3><ul><li>串行和并发决定了任务的执行方式(串行一次一个，并发一次多个)</li><li>同步和异步决定了要不要开启新的线程 (同步不开，异步开)</li></ul><h2 id="GCD延迟执行-after"><a href="#GCD延迟执行-after" class="headerlink" title="GCD延迟执行(after)"></a>GCD延迟执行(after)</h2><ul><li>延迟操作: <code>dispatch_after</code> 这个函数默认是异步执行的<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)afterDemo&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span>*<span class="built_in">NSEC_PER_SEC</span>)),dispatch_get_global_queue(),^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"delay code"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="GCD一次性执行-once"><a href="#GCD一次性执行-once" class="headerlink" title="GCD一次性执行(once)"></a>GCD一次性执行(once)</h3><ul><li><code>dispatch_once_t</code> 内部有一把锁,能够保证线程安全.</li><li><strong>原理</strong>：<code>onceToken</code> 有个初始值,当第一次执行时,判断是否是初始值,如果是初始值就执行函数内部的代码,执行结束之前会修改<code>onceToken</code>初始值.反之,就不执行.<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)onceDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"result %ld"</span>,onceToken);</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"hello"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="单例设计模式（iOS）"><a href="#单例设计模式（iOS）" class="headerlink" title="单例设计模式（iOS）"></a>单例设计模式（iOS）</h2><h3 id="单例设计模式的特点"><a href="#单例设计模式的特点" class="headerlink" title="单例设计模式的特点"></a>单例设计模式的特点</h3><ol><li>有一个全局访问点（供全局实例化单例的类方法）</li><li>单例保存在静态存储区</li><li>在内存有且只有一份</li><li>生命周期跟APP一样长</li></ol><h3 id="如何做到被子类继承"><a href="#如何做到被子类继承" class="headerlink" title="如何做到被子类继承"></a>如何做到被子类继承</h3><ul><li>在给instance赋值时要使用<code>[self new];</code>或者<code>[[self alloc] init];</code></li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 保存在静态存储区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="comment">// 声明静态对象</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line">+ (<span class="keyword">void</span>)initialize</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 只会开辟一次内存空间,只会被实例化一次</span></span><br><span class="line">  instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCD与-NSThread-的对比&quot;&gt;&lt;a href=&quot;#GCD与-NSThread-的对比&quot; class=&quot;headerlink&quot; title=&quot;GCD与 NSThread 的对比&quot;&gt;&lt;/a&gt;GCD与 NSThread 的对比&lt;/h2&gt;&lt;h3 id=&quot;NSThr
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="GCD" scheme="http://techbird.me/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之NSThread</title>
    <link href="http://techbird.me/2018/04/29/ios-nsthread/"/>
    <id>http://techbird.me/2018/04/29/ios-nsthread/</id>
    <published>2018-04-29T06:56:59.000Z</published>
    <updated>2018-05-10T04:28:55.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程基础（NSThread）"><a href="#多线程基础（NSThread）" class="headerlink" title="多线程基础（NSThread）"></a>多线程基础（NSThread）</h1><h2 id="NSThread创建线程的三种方式"><a href="#NSThread创建线程的三种方式" class="headerlink" title="NSThread创建线程的三种方式"></a>NSThread创建线程的三种方式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(demo:) object:<span class="string">@"alloc"</span>];</span><br><span class="line"><span class="number">2.</span> [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(demo:) toTarget:<span class="keyword">self</span> withObject:<span class="string">@"detach"</span>];</span><br><span class="line"><span class="number">3.</span> [<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(demo:) withObject:<span class="string">@"perform"</span>];</span><br></pre></td></tr></table></figure><h2 id="target和selector的关系"><a href="#target和selector的关系" class="headerlink" title="target和selector的关系"></a>target和selector的关系</h2><ul><li>执行哪个对象上的哪个方法.</li></ul><h2 id="线程的状态-生命周期"><a href="#线程的状态-生命周期" class="headerlink" title="线程的状态-生命周期"></a>线程的状态-生命周期</h2><ul><li><code>start</code> ：就绪状态，等待被CPU调用，当被调用的时候为运行状态</li><li><code>sleep/加锁</code>：阻塞状态</li><li><code>exit</code>：完全杀死（非正常死亡），<strong>不要在主线程中调用</strong></li></ul><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><h3 id="name-线程名称"><a href="#name-线程名称" class="headerlink" title="name (线程名称)"></a><code>name</code> (线程名称)</h3><ul><li>设置线程名称可以当线程执行的方法内部出现异常时，记录异常和当前线程</li></ul><h3 id="stackSize-栈区大小"><a href="#stackSize-栈区大小" class="headerlink" title="stackSize(栈区大小)"></a><code>stackSize</code>(栈区大小)</h3><ul><li>默认情况下，无论是主线程还是子线程，栈区大小都是 512K</li><li><p>栈区大小可以设置 </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">NSThread</span> currentThread].stackSize = <span class="number">1024</span> * <span class="number">1024</span>;</span><br></pre></td></tr></table></figure></li><li><p>必须是 <code>4KB</code> 的倍数</p></li></ul><h3 id="isMainThread-是否主线程"><a href="#isMainThread-是否主线程" class="headerlink" title="isMainThread (是否主线程)"></a><code>isMainThread</code> (是否主线程)</h3><h3 id="threadPriority-线程优先级"><a href="#threadPriority-线程优先级" class="headerlink" title="threadPriority (线程优先级)"></a><code>threadPriority</code> (线程优先级)</h3><ul><li>优先级，是一个浮点数，取值范围从<code>0~1.0</code></li><li><code>1.0</code>表示优先级最高</li><li><code>0.0</code>表示优先级最低</li><li>默认优先级是 <code>0.5</code></li><li><strong>优先级高只是保证 CPU 调度的可能性会高</strong></li></ul><h3 id="qualityOfService-服务质量-iOS-8-0-推出"><a href="#qualityOfService-服务质量-iOS-8-0-推出" class="headerlink" title="qualityOfService (服务质量,iOS 8.0 推出)"></a><code>qualityOfService</code> (服务质量,iOS 8.0 推出)</h3><ul><li><code>NSQualityOfServiceUserInteractive</code> - 用户交互，例如绘图或者处理用户事件</li><li><code>NSQualityOfServiceUserInitiated</code> - 用户需要</li><li><code>NSQualityOfServiceUtility</code> - 实用工具，用户不需要立即得到结果</li><li><code>NSQualityOfServiceBackground</code> - 后台</li><li><code>NSQualityOfServiceDefault</code> - 默认，介于用户需要和实用工具之间</li></ul><h2 id="线程安全-资源共享（互斥锁小结）"><a href="#线程安全-资源共享（互斥锁小结）" class="headerlink" title="线程安全-资源共享（互斥锁小结）"></a>线程安全-资源共享（互斥锁小结）</h2><ul><li><code>@synchronized</code>互斥锁，使用了线程同步技术</li><li>同步锁/互斥锁：可以保证被锁定的代码，同一时间，只能有一个县城可以操作</li><li><code>self</code>：锁对象，任何继承自NSObject的对象都可以是锁对象，因为内部都有一把锁，而且是默认开着的</li><li>锁对象：一定要是全局的锁对象，要保证所有的线程都能访问，<code>self</code>是最方便使用的锁对象</li><li>互斥锁锁定的范围应该尽量小，但是一定要锁住资源的<code>读写</code>部分</li><li>加锁后程序的执行效率比不加锁的时候要低，因为线程要的等待解锁</li><li>牺牲了性能保证了安全</li></ul><h2 id="原子属性和非原子属性-以及自旋锁"><a href="#原子属性和非原子属性-以及自旋锁" class="headerlink" title="原子属性和非原子属性-以及自旋锁"></a>原子属性和非原子属性-以及自旋锁</h2><h3 id="nonatomic-非原子属性"><a href="#nonatomic-非原子属性" class="headerlink" title="nonatomic : 非原子属性"></a><code>nonatomic</code> : 非原子属性</h3><ul><li>线程不安全，不考虑多线程情况时使用此属性</li><li>编译器少生成一些互斥加锁代码，可以提高效率。</li></ul><h3 id="atomic-原子属性"><a href="#atomic-原子属性" class="headerlink" title="atomic : 原子属性"></a><code>atomic</code> : 原子属性</h3><ul><li>线程安全的,针对多线程设计的属性修饰符,是默认值.</li><li>特点 : 单写多读</li><li>单写多读 : 保证同一时间,只有一个线程能够执行setter方法,但是可以有多个线程执行getter方法.</li><li>atomic 属性的setter里面里面有一把锁,叫做自旋锁.</li><li>原子属性的setter方法是线程安全的;但是,getter方法不是线程安全的.</li></ul><h3 id="nonatomic和atomic对比："><a href="#nonatomic和atomic对比：" class="headerlink" title="nonatomic和atomic对比："></a><code>nonatomic</code>和<code>atomic</code>对比：</h3><ul><li><code>nonatomic</code>: 非线程安全,适合内存小的移动设备.</li><li><code>atomic</code> : 线程安全,需要消耗大量的资源.性能比非原子属性要差一点</li></ul><h2 id="线程间通信（为什么能通信？）"><a href="#线程间通信（为什么能通信？）" class="headerlink" title="线程间通信（为什么能通信？）"></a>线程间通信（为什么能通信？）</h2><ul><li><code>performSelectorInBackground</code></li><li><code>performSelectorOnMainThread</code></li><li>因为多线程共享地址空间和数据空间， 一个线程的数据可以直接提供给其他线程使用,叫做线程间通信</li></ul><h1 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h1><h2 id="类方法initialize"><a href="#类方法initialize" class="headerlink" title="类方法initialize"></a>类方法initialize</h2><ul><li>会在类第一次被使用时调用，且只会调用一次</li><li>此方法的调用是线程安全的</li></ul><h2 id="synthesize是啥？什么情况下使用？"><a href="#synthesize是啥？什么情况下使用？" class="headerlink" title="@synthesize是啥？什么情况下使用？"></a>@synthesize是啥？什么情况下使用？</h2><ul><li>首先一旦重写来属性的setter和getter方法后,系统不再自动生成带下划线的成员变量,而这行代码会创造一个带下划线前缀的实例变量名,同时使用这个属性生成getter 和 setter 方法。</li><li>使用<code>@synthesize</code> 只有一个目的——给实例变量起个别名,或者说为同一个变量添加两个名字。</li><li>如果要阻止自动合成，记得使用 <code>@dynamic</code> 。经典的使用场景是你知道已经在某处实现了getter/setter 方法,而编译器不知道的情况。</li><li>如何使用：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> obj2 = _obj2;</span><br></pre></td></tr></table></figure></li></ul><h2 id="栈区-堆区-常量区"><a href="#栈区-堆区-常量区" class="headerlink" title="栈区/堆区/常量区"></a>栈区/堆区/常量区</h2><ul><li>操作内存的栈区速度快;栈区存储空间地址是连续的</li><li>操作内存的常量区速度快;内存空间只开辟一次</li><li>操作内存的堆区速度相对栈区和常量区要慢些;堆区内存空间不连续,需要寻址的过程<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储在栈区</span></span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 存储在常量区  </span></span><br><span class="line"> <span class="built_in">NSString</span> *str1 = <span class="string">@"hello"</span>;</span><br><span class="line"><span class="comment">// 存储在堆区</span></span><br><span class="line"> <span class="built_in">NSString</span> *str2 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hello_%d"</span>,i];</span><br></pre></td></tr></table></figure></li></ul><h2 id="NSUInteger和NSInteger的区别"><a href="#NSUInteger和NSInteger的区别" class="headerlink" title="NSUInteger和NSInteger的区别"></a><code>NSUInteger</code>和<code>NSInteger</code>的区别</h2><ul><li><code>NSUInteger</code> 无符号整数(没有负数)用 <code>%tu</code><br><code>%tu</code>NSUInteger的占位符，可以适配 NSUInteger的32位设备和64位设备<br>32位设备: NSUInteger是<code>无符号的int</code> (无符号表示没有正负数)<br>64位设备: NSUInteger是<code>无符号的long</code></li><li><code>NSInteger</code>有符号整数(有正负数)用 <code>%zd</code><br><code>%zd</code>NSInteger的占位符，可以适配 NSInteger的32位设备和64位设备<br>32位设备: NSInteger是<code>有符号的int</code> (有符号表示有正负数)<br>64位设备: NSInteger是<code>有符号的long</code></li><li>以上这种设计是为了自适应32位和64位CPU的架构.</li></ul><h2 id="loadView的注意事项"><a href="#loadView的注意事项" class="headerlink" title="loadView的注意事项"></a>loadView的注意事项</h2><ol><li>用于加载指定的视图，一旦重写了这个方法，Storyboard里面就不会去加载根视图了</li><li>先于<code>viewDidLoad</code>调用</li><li>不可以调用<code>super.loadView()</code></li><li>当<code>self.view == nil</code>时回调用此方法</li></ol><h2 id="ViewController的生命周期"><a href="#ViewController的生命周期" class="headerlink" title="ViewController的生命周期"></a>ViewController的生命周期</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F01.1d4fa57c6b9841bebc26fe8908fe6051.png" alt=""></p><ul><li><code>loadView</code>：用于加载制定的根试图</li><li><code>viewDidLoad</code>：试图加载完毕</li><li><code>viewWillAppear</code>：界面即将显示在屏幕上</li><li><code>viewDidAppear</code>：界面已经完全渲染在屏幕上</li><li><code>viewWillDisappear</code>：界面即将从屏幕上消失</li><li><code>viewDidDisappear</code>：界面已经完全消失</li><li><code>dealloc</code>：控制器销毁</li></ul><h2 id="什么时候用stong-weak"><a href="#什么时候用stong-weak" class="headerlink" title="什么时候用stong/weak"></a>什么时候用stong/weak</h2><ul><li>根视图和父视图需要使用<code>strong</code>; 子视图使用<code>weak</code></li><li>没有强指针指向的对象使用<code>strong</code>; 有强指针指向的可以可以<code>weak</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程基础（NSThread）&quot;&gt;&lt;a href=&quot;#多线程基础（NSThread）&quot; class=&quot;headerlink&quot; title=&quot;多线程基础（NSThread）&quot;&gt;&lt;/a&gt;多线程基础（NSThread）&lt;/h1&gt;&lt;h2 id=&quot;NSThread创建线程的
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="NSThread" scheme="http://techbird.me/tags/NSThread/"/>
    
  </entry>
  
  <entry>
    <title>Xcode-打包证书创建流程</title>
    <link href="http://techbird.me/2018/04/29/xcode-pack-cer-create-process/"/>
    <id>http://techbird.me/2018/04/29/xcode-pack-cer-create-process/</id>
    <published>2018-04-29T03:48:37.000Z</published>
    <updated>2018-05-08T02:18:00.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建CSR证书"><a href="#创建CSR证书" class="headerlink" title="创建CSR证书"></a>创建CSR证书</h2><h3 id="点击spotlight输入keychain打开钥匙串"><a href="#点击spotlight输入keychain打开钥匙串" class="headerlink" title="点击spotlight输入keychain打开钥匙串"></a>点击spotlight输入keychain打开钥匙串</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180415-192128.ed09497c15d24f6bb84e812effb1d0f9.png" alt="">  </p><h3 id="生成CSR文件"><a href="#生成CSR文件" class="headerlink" title="生成CSR文件"></a>生成CSR文件</h3><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ae2ad2036be3471b9b1549406a95e44b.png" alt=""></p><h2 id="创建Cer证书"><a href="#创建Cer证书" class="headerlink" title="创建Cer证书"></a>创建Cer证书</h2><h3 id="登录-apple-developer"><a href="#登录-apple-developer" class="headerlink" title="登录 apple developer"></a><a href="https://developer.apple.com/account/" target="_blank" rel="noopener">登录 apple developer</a></h3><h3 id="使用CSR文件创建Development和Distribution的CER证书并下载"><a href="#使用CSR文件创建Development和Distribution的CER证书并下载" class="headerlink" title="使用CSR文件创建Development和Distribution的CER证书并下载"></a>使用CSR文件创建Development和Distribution的CER证书并下载</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ca56c2a73e474422ac1aaac410172bc6.png" alt=""></p><h3 id="双击下载好的cer证书，然后导出对应的p12文件（dev-dis）"><a href="#双击下载好的cer证书，然后导出对应的p12文件（dev-dis）" class="headerlink" title="双击下载好的cer证书，然后导出对应的p12文件（dev/dis）"></a>双击下载好的cer证书，然后导出对应的p12文件（dev/dis）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.bc375b929a6f463f8d85d6f92e6bc853.png" alt=""></p><h2 id="创建Provisioning-Profile"><a href="#创建Provisioning-Profile" class="headerlink" title="创建Provisioning Profile"></a>创建Provisioning Profile</h2><p>这里要创建是三种profile（dev/dis/adhoc）<br><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.8b0bda299adf43029f16d552dceac353.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建CSR证书&quot;&gt;&lt;a href=&quot;#创建CSR证书&quot; class=&quot;headerlink&quot; title=&quot;创建CSR证书&quot;&gt;&lt;/a&gt;创建CSR证书&lt;/h2&gt;&lt;h3 id=&quot;点击spotlight输入keychain打开钥匙串&quot;&gt;&lt;a href=&quot;#点击spotl
      
    
    </summary>
    
      <category term="Xcode" scheme="http://techbird.me/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://techbird.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://techbird.me/2018/04/22/hello-world/"/>
    <id>http://techbird.me/2018/04/22/hello-world/</id>
    <published>2018-04-21T16:31:37.333Z</published>
    <updated>2018-04-26T14:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="云标签" scheme="http://techbird.me/tags/%E4%BA%91%E6%A0%87%E7%AD%BE/"/>
    
      <category term="分类" scheme="http://techbird.me/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
