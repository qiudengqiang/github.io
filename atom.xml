<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>techbird&#39;s blog</title>
  
  <subtitle>timeline of techology</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://techbird.me/"/>
  <updated>2018-05-23T12:47:01.549Z</updated>
  <id>http://techbird.me/</id>
  
  <author>
    <name>techbird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-KVC和KVO的使用和原理</title>
    <link href="http://techbird.me/2018/05/23/ios-kvc-and-kvo/"/>
    <id>http://techbird.me/2018/05/23/ios-kvc-and-kvo/</id>
    <published>2018-05-23T04:55:57.000Z</published>
    <updated>2018-05-23T12:47:01.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h1><p>KVC(键值编码)，即 Key-Value Coding，一个非正式的 Protocol，使用字符串(键)访问一个对象实例变量的机制。而不是通过调用 Setter、Getter 方法等显式的存取方式去访问。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>KVC（Key-value coding），键值编码；是指在iOS开发中，可以允许开发者通过属性名<code>Key</code>直接访问对象的属性并给属性<code>编码</code>（赋值value），而不是调用对应的getter/setter方法。很多高级的iOS开发技巧都是基于KVC实现，例如修改系统控件内部属性；json-&gt;model的映射框架等。</p><h2 id="KVC最重要的四个方法"><a href="#KVC最重要的四个方法" class="headerlink" title="KVC最重要的四个方法"></a>KVC最重要的四个方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> * )key;                          <span class="comment">//直接通过Key来取值</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> * )key;          <span class="comment">//通过Key来设值</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> * )keyPath;                  <span class="comment">//通过KeyPath来取值</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> * )keyPath;  <span class="comment">//通过KeyPath来设值</span></span><br></pre></td></tr></table></figure><h2 id="valueForKey-和-valueForKeyPath区别"><a href="#valueForKey-和-valueForKeyPath区别" class="headerlink" title="valueForKey 和 valueForKeyPath区别"></a>valueForKey 和 valueForKeyPath区别</h2><h3 id="先来看一段代码"><a href="#先来看一段代码" class="headerlink" title="先来看一段代码"></a>先来看一段代码</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSDictionary</span> * dict = @&#123;<span class="string">@"key1"</span>:<span class="string">@"value1"</span>,</span><br><span class="line">                           <span class="string">@"second"</span>:@&#123;</span><br><span class="line">                                   <span class="string">@"k1"</span>:<span class="string">@"v1"</span>,</span><br><span class="line">                                   <span class="string">@"k2"</span>:<span class="string">@"v2"</span>,</span><br><span class="line">                                   <span class="string">@"third"</span>:@&#123;</span><br><span class="line">                                           <span class="string">@"t1"</span>:<span class="string">@"h1"</span>,</span><br><span class="line">                                           <span class="string">@"t2"</span>:<span class="string">@"h2"</span></span><br><span class="line">                                           &#125;</span><br><span class="line">                                   &#125;</span><br><span class="line">                           &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDictionary</span> * second = [dict valueForKey:<span class="string">@"second"</span>];</span><br><span class="line">    <span class="built_in">NSDictionary</span> * third1 = [second valueForKey:<span class="string">@"third"</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,third1);</span><br><span class="line">    <span class="built_in">NSDictionary</span> * third2 = [dict valueForKeyPath:<span class="string">@"second.third"</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,third2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018-05-23 13:52:33.430617+0800 KVC-Demo[1584:403407] &#123;</span><br><span class="line">    t1 = h1;</span><br><span class="line">    t2 = h2;</span><br><span class="line">&#125;</span><br><span class="line">2018-05-23 13:52:33.430800+0800 KVC-Demo[1584:403407] &#123;</span><br><span class="line">    t1 = h1;</span><br><span class="line">    t2 = h2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过代码我们可以看出，我们想要从dict这个字典中获取到<code>third</code>这个key所对应的值得话,使用<code>valueForKey</code>需要通过一层一层的对象才能取到想要的字典，而使用valueForKeyPath则只需要输入third在字典中的<code>路径（path）</code>一次就可以取到third字典。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.jianshu.com/p/c0e099f72a3b" target="_blank" rel="noopener">https://www.jianshu.com/p/c0e099f72a3b</a><br><a href="https://www.jianshu.com/p/a6a0abac1c4a" target="_blank" rel="noopener">https://www.jianshu.com/p/a6a0abac1c4a</a></p><h2 id="KVC的使用"><a href="#KVC的使用" class="headerlink" title="KVC的使用"></a>KVC的使用</h2><h3 id="代替getter-setter"><a href="#代替getter-setter" class="headerlink" title="代替getter/setter"></a>代替getter/setter</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Model</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> * text;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) SubModel * subModel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubModel</span> : <span class="title">Model</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> * subText;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ul><li><p>不使用kvc</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line">Model *model = [[Model alloc]init];</span><br><span class="line">model.text = <span class="string">@"text"</span>;</span><br><span class="line">SubModel *subModel = [[SubModel alloc]init];</span><br><span class="line">subModel.subText = <span class="string">@"subText"</span>;</span><br><span class="line">model.subModel = subModel;</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="built_in">NSString</span> *text =  model.text;</span><br><span class="line"><span class="built_in">NSString</span> *subText = model.subModel.subText;</span><br></pre></td></tr></table></figure></li><li><p>使用kvc</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line">Model *model = [[Model alloc]init];</span><br><span class="line">[model setValue:<span class="string">@"text"</span> forKey:<span class="string">@"text"</span>];</span><br><span class="line">[model setValue:<span class="string">@"subText"</span> forKeyPath:<span class="string">@"subModel.subText"</span>];</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="built_in">NSString</span> *text =  [model valueForKey:<span class="string">@"text"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *subText = [model valueForKeyPath:<span class="string">@"subModel.subText"</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="字典转模型（仿YYModel）"><a href="#字典转模型（仿YYModel）" class="headerlink" title="字典转模型（仿YYModel）"></a>字典转模型（仿YYModel）</h3><ul><li><p>创建NSObject的扩展NSObject+Model</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">Model</span>)</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>) tb_modelWithDictionary:(<span class="built_in">NSDictionary</span> * )dictionary;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>实现SObject+Model<br>利用Runtime取到对应类的属性列表，在使用kvc对所有属性进行赋值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Model</span>)</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> * )getPropertyList:(Class)cls&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> * array = objc_getAssociatedObject(<span class="keyword">self</span>, `_cmd`);</span><br><span class="line">    <span class="keyword">if</span> (array != <span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> * arrM = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="comment">//输出个数</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">    <span class="comment">//获取属性列表（ objc_property_t * ）</span></span><br><span class="line">    objc_property_t * properties = class_copyPropertyList(cls, &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;outCount; ++i) &#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="comment">//属性名字</span></span><br><span class="line">        <span class="built_in">NSString</span> * name = [<span class="built_in">NSString</span> stringWithUTF8String:property_getName(property)];</span><br><span class="line">        [arrM addObject:name];</span><br><span class="line">    &#125;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(getPropertyList:), [arrM <span class="keyword">copy</span>], OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> [arrM <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)tb_modelWithDictionary:(<span class="built_in">NSDictionary</span> * )dictionary&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> * object = [[<span class="keyword">self</span> alloc]init];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSArray</span> * array = [<span class="keyword">self</span> getPropertyList:[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">    [dictionary enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> * key, <span class="keyword">id</span> value, <span class="built_in">BOOL</span> * stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([array containsObject:key])&#123;</span><br><span class="line">            [object setValue:value forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>使用tb_modelWithDictionary模仿YYModel的字典转模型方式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSDictionary</span> * dict = @&#123;</span><br><span class="line">                           <span class="string">@"text"</span>:<span class="string">@"text"</span></span><br><span class="line">                           &#125;;</span><br><span class="line">    Model * model = [Model tb_modelWithDictionary:dict];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改系统控件内部属性（runtime-kvc）"><a href="#修改系统控件内部属性（runtime-kvc）" class="headerlink" title="修改系统控件内部属性（runtime+kvc）"></a>修改系统控件内部属性（runtime+kvc）</h3><ul><li>需求：修改UIPageControl小圆点的背景图片</li><li>查看UIPageControl.h如下<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIPageControl</span> : <span class="title">UIControl</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> numberOfPages;          <span class="comment">// default is 0</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> currentPage;            <span class="comment">// default is 0. value pinned to 0..numberOfPages-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> hidesForSinglePage;          <span class="comment">// hide the the indicator if there is only one page. default is NO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> defersCurrentPageDisplay;    <span class="comment">// if set, clicking to a new page won't update the currently displayed page until -updateCurrentPageDisplay is called. default is NO</span></span><br><span class="line">- (<span class="keyword">void</span>)updateCurrentPageDisplay;                      <span class="comment">// update page display to match the currentPage. ignored if defersCurrentPageDisplay is NO. setting the page value directly will update immediately</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGSize</span>)sizeForNumberOfPages:(<span class="built_in">NSInteger</span>)pageCount;   <span class="comment">// returns minimum size required to display dots for given page count. can be used to size control if page count could change</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> * pageIndicatorTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> * currentPageIndicatorTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li></ul><p>没有发现UIPageControl暴露的操作中有设置小圆点背景图片的方法和属性，那么就可以利用runtime遍历UIPageControl类的成员变量（<code>ivar</code>）和属性（<code>property</code>）</p><ul><li>利用runtime遍历UIPageControl成员变量</li></ul><p>导入头文件：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>遍历成员变量：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIPageControl</span> * pc = [[<span class="built_in">UIPageControl</span> alloc]init];</span><br><span class="line">    <span class="built_in">NSArray</span> * array = [<span class="keyword">self</span> getIvarList:[pc <span class="keyword">class</span>]];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,array);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSArray</span> * )getIvarList:(Class)cls&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> * arrM = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">    Ivar * ivars = class_copyIvarList(cls, &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;outCount; ++i) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        <span class="built_in">NSString</span> * name = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        <span class="built_in">NSString</span> * type = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];</span><br><span class="line">        <span class="built_in">NSString</span> * str = [name stringByAppendingFormat:<span class="string">@" -- %@"</span>,type];</span><br><span class="line">        [arrM addObject:str];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    <span class="keyword">return</span> [arrM <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2018-05-23 16:45:18.380346+0800 KVC-Demo[4400:856521] (</span><br><span class="line">    "_lastUserInterfaceIdiom -- q",</span><br><span class="line">    "_indicators -- @\"NSMutableArray\"",</span><br><span class="line">    "_currentPage -- q",</span><br><span class="line">    "_displayedPage -- q",</span><br><span class="line">    "_pageControlFlags -- &#123;?=\"hideForSinglePage\"b1\"defersCurrentPageDisplay\"b1&#125;",</span><br><span class="line">    "_currentPageImage -- @\"UIImage\"",</span><br><span class="line">    "_pageImage -- @\"UIImage\"",</span><br><span class="line">    "_currentPageImages -- @\"NSMutableArray\"",</span><br><span class="line">    "_pageImages -- @\"NSMutableArray\"",</span><br><span class="line">    "_backgroundVisualEffectView -- @\"UIVisualEffectView\"",</span><br><span class="line">    "_currentPageIndicatorTintColor -- @\"UIColor\"",</span><br><span class="line">    "_pageIndicatorTintColor -- @\"UIColor\"",</span><br><span class="line">    "_legibilitySettings -- @\"_UILegibilitySettings\"",</span><br><span class="line">    "_numberOfPages -- q"</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>利用kvc设置<code>_currentPageImage</code>和<code>_pageImage</code></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPageControl</span> *pc = [[<span class="built_in">UIPageControl</span> alloc]init];</span><br><span class="line">[pc setValue:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"pageImage"</span>] forKeyPath:<span class="string">@"_pageImage"</span>];</span><br><span class="line">[pc setValue:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"currentPageImage"</span>] forKeyPath:<span class="string">@"_currentPageImage"</span>];</span><br></pre></td></tr></table></figure><h3 id="XIB-Storyboard"><a href="#XIB-Storyboard" class="headerlink" title="XIB/Storyboard"></a>XIB/Storyboard</h3><p>在xib/Storyboard中，也可以使用KVC，例如下面是在xib中使用KVC把图片边框设置成圆角。<br><img src="http://p7xd6yrmx.bkt.clouddn.com/kvc_layer_cornerradius.png" alt=""></p><h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p>KVO(键值监听)，即 Key-Value Observing，它提供一种机制,当指定的对象的属性被修改后，对象就会接受到通知，前提是执行了 setter 方法、或者使用了 KVC 赋值。</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>KVO 是 Objective-C 对观察者设计模式的一种实现；[另外一种是：通知机制（notification）]。</p><h2 id="使用（Swift）"><a href="#使用（Swift）" class="headerlink" title="使用（Swift）"></a>使用（Swift）</h2><p>需求：UIScrollView内包含一部分原生控件和UIWebView的组合;这种情况下UIWebView的高度无法得知，因为UIWebV写完中包含UIScrollerView，所以需要利用KVO技术监听UIWebView中UIScrollerView的contentSize的变化以达到需求的目的。</p><h3 id="addOberver"><a href="#addOberver" class="headerlink" title="addOberver"></a>addOberver</h3><ul><li>一般在viewDidLoad中添加监听<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> scrollView = mWebView.subviews.first <span class="keyword">as</span>? <span class="type">UIScrollView</span> &#123;</span><br><span class="line">            scrollView.alwaysBounceVertical = <span class="literal">false</span></span><br><span class="line">            scrollView.alwaysBounceHorizontal = <span class="literal">false</span></span><br><span class="line">            scrollView.bounces = <span class="literal">false</span></span><br><span class="line">            scrollView.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"contentSize"</span>, options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="observerValueForkeyPath"><a href="#observerValueForkeyPath" class="headerlink" title="observerValueForkeyPath"></a>observerValueForkeyPath</h3><ul><li>当contentSize发生变化时,会回调到<code>observerValueForkeyPath</code>这个方法<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> keyPath == <span class="string">"contentSize"</span> &amp;&amp; change != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> value = (change![<span class="type">NSKeyValueChangeKey</span>.newKey] <span class="keyword">as</span>! <span class="type">NSValue</span>).cgSizeValue.height</span><br><span class="line">            desViewHeightCons.constant = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="removeObserver"><a href="#removeObserver" class="headerlink" title="removeObserver"></a>removeObserver</h3><ul><li>当界面销毁时，移除监听<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scrollView = mWebView?.subviews.first <span class="keyword">as</span>? <span class="type">UIScrollView</span> &#123;</span><br><span class="line">            scrollView.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"contentSize"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="KVO的原理"><a href="#KVO的原理" class="headerlink" title="KVO的原理"></a>KVO的原理</h2><p>键值编码(KVC)和键值观察（KVO）是根据<code>isa-swizzling</code>技术来实现的，主要依据runtime的强大动态能力。<br>当某个类第一次被观察时，系统会在运行时期动态的创建一个该类的派生类，在这个派生类中重写任何被观察属性的<code>setter</code>方法。派生类在被重写的setter方法实现真正的通知机制，这么设计是基于设置属性会调用setter方法，而通过重写就获得了KVO需要的通知机制，当然前提是要遵循KVO的属性设置方式来变更属性值，如果直接修改属性对应的成员变量是无法实现KVO的。<br>同时派生类还重写了class方法一<code>欺骗</code>外部调用者它就是起初的那个类，然后系统将<code>isa</code>指针指向这个新诞生的派生类，因此这个对象就成为该派生类的对象了，因为在该对象上对setter的调用就会调用的重写的setter，从而激活键值通知机制。此外派生类还重写了<code>delloc</code>方法来说释放资源。</p><p>在Runtime篇章中介绍过，isa指针其实指向的是类的元类，如果添加监听之前的类名为<code>Person</code>,那么添加监听之后被runtime更改以后的类名会变成：<code>NSKVONotifying_Person</code></p><p>新的派生类<code>NSKVONotifying_Person</code>会重写以下方法：<br>增加了监听的属性对应的<code>setter</code>,<code>class</code>,<code>delloc</code>,<code>_isKVOA</code></p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>重写class方法是为了方便我们调用它的时候，返回跟重写继承类之前同样的内容。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person *person = [[Person alloc]init];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"before isa:%@  class:%@"</span>,object_getClass(person), [person <span class="keyword">class</span>]);</span><br><span class="line">[person addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"age"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"end isa:%@  class:%@"</span>,object_getClass(person), [person <span class="keyword">class</span>]);</span><br><span class="line">_person = person;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-05-23 19:55:23.430908+0800 KVO-Demo[6395:1312349] before isa:Person  class:Person</span><br><span class="line">2018-05-23 19:55:23.431456+0800 KVO-Demo[6395:1312349] end isa:NSKVONotifying_Person  class:Person</span><br></pre></td></tr></table></figure></p><p>这也是<code>isa</code>指针和<code>class</code>方法的一个区别，使用的时候要<code>特别注意</code>。</p><h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>新的派生类会重写对应的setter方法，其实是为了在setter中增加另外两个方法的调用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)willChangeValueForKey:(<span class="built_in">NSString</span> * )key  </span><br><span class="line">- (<span class="keyword">void</span>)didChangeValueForKey:(<span class="built_in">NSString</span> * )key</span><br></pre></td></tr></table></figure></p><p>其中 <code>didChangeValueForKey</code>负责触发：<code>observeValueForKeyPath:keyPath :object :change :context</code>方法，这就是<code>kvo</code>的原理。<br>如果没有执行<code>setter</code>之类的调用，那么使用<code>setValue:forKey</code>方法也会直接调用<code>observeValueForKeyPath:keyPath :object :change :context</code>方法<br>再如果既没有调用<code>setter</code>也没有调用<code>setValue:forKey</code>，那么<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)willChangeValueForKey:(<span class="built_in">NSString</span> * )key  </span><br><span class="line">- (<span class="keyword">void</span>)didChangeValueForKey:(<span class="built_in">NSString</span> * )key</span><br></pre></td></tr></table></figure></p><p>我们只需要显示调用上述两个方法，就会触发<code>observeValueForKeyPath:keyPath :object :change :context</code>方法，同样可以使用KVO。</p><h3 id="isKVOA"><a href="#isKVOA" class="headerlink" title="_isKVOA"></a><code>_isKVOA</code></h3><p>这个私有方法是用来表示该类是一个KVO机制声明的类</p><h3 id="小结（触发KVO的三种方法）"><a href="#小结（触发KVO的三种方法）" class="headerlink" title="小结（触发KVO的三种方法）"></a>小结（触发KVO的三种方法）</h3><ol><li>使用KVC （运行时会在<code>setValue:forKey</code>中来调用<code>will/didChangeValueForKey:</code>）</li><li>使用setter方法（运行时会在setter方法中调用<code>will/didChangeValueForKey:</code>）</li><li>显示调用<code>will/didChangeValueForKey:</code>方法</li></ol><h2 id="如何更优雅的使用KVO"><a href="#如何更优雅的使用KVO" class="headerlink" title="如何更优雅的使用KVO"></a>如何更优雅的使用KVO</h2><p>只需要使用 Facebook 开源的 <a href="https://github.com/facebook/KVOController" target="_blank" rel="noopener">KVOController</a> 框架就可以优雅地解决这些问题了。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.KVOController observe:person</span><br><span class="line">                    keyPath:<span class="string">@"age"</span></span><br><span class="line">                    options:<span class="built_in">NSKeyValueObservingOptionNew</span> | <span class="built_in">NSKeyValueObservingOptionOld</span></span><br><span class="line">                      block:^(<span class="keyword">id</span>  observer, <span class="keyword">id</span>  object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span>  * , <span class="keyword">id</span>&gt; *  change) &#123;</span><br><span class="line">                          <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change);</span><br><span class="line">                      &#125;];</span><br></pre></td></tr></table></figure></p><p>我们可以在任意对象上获得 <code>KVOController</code> 对象，然后调用它的实例方法 <code>-observer:keyPath:options:block:</code> 就可以检测某个对象对应的属性了，该方法传入的参数非常容易理解，在 block 中也可以获得所有与 KVO 有关的参数。</p><p>使用 KVOController 进行键值观测可以说完美地解决了在使用原生 KVO 时遇到的各种问题:</p><p>不需要手动移除观察者；<br>实现 KVO 与事件发生处的代码上下文相同，不需要跨方法传参数；<br>使用 block 来替代方法能够减少使用的复杂度，提升使用 KVO 的体验；<br>每一个 keyPath 会对应一个属性，不需要在 block 中使用 if 判断 keyPath；</p><h1 id="参考文档和博客"><a href="#参考文档和博客" class="headerlink" title="参考文档和博客"></a>参考文档和博客</h1><p><a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1" target="_blank" rel="noopener">http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1</a><br><a href="https://blog.csdn.net/wzzvictory/article/details/9674431" target="_blank" rel="noopener">https://blog.csdn.net/wzzvictory/article/details/9674431</a><br><a href="https://blog.csdn.net/kesalin/article/details/8194240" target="_blank" rel="noopener">https://blog.csdn.net/kesalin/article/details/8194240</a><br><a href="https://draveness.me/kvocontroller" target="_blank" rel="noopener">https://draveness.me/kvocontroller</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KVC&quot;&gt;&lt;a href=&quot;#KVC&quot; class=&quot;headerlink&quot; title=&quot;KVC&quot;&gt;&lt;/a&gt;KVC&lt;/h1&gt;&lt;p&gt;KVC(键值编码)，即 Key-Value Coding，一个非正式的 Protocol，使用字符串(键)访问一个对象实例变量的机制
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="KVC" scheme="http://techbird.me/tags/KVC/"/>
    
      <category term="KVO" scheme="http://techbird.me/tags/KVO/"/>
    
  </entry>
  
  <entry>
    <title>iOS-TableView的重用机制及优化</title>
    <link href="http://techbird.me/2018/05/18/ios-uitableview-optimize/"/>
    <id>http://techbird.me/2018/05/18/ios-uitableview-optimize/</id>
    <published>2018-05-18T13:41:01.000Z</published>
    <updated>2018-05-18T13:51:57.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS-TableView的重用机制"><a href="#iOS-TableView的重用机制" class="headerlink" title="iOS-TableView的重用机制"></a>iOS-TableView的重用机制</h2><h3 id="什么是Cell的重用？"><a href="#什么是Cell的重用？" class="headerlink" title="什么是Cell的重用？"></a>什么是Cell的重用？</h3><p>重用机制，简单的说意思是一行一行cell的复用</p><h3 id="为什么要重用？"><a href="#为什么要重用？" class="headerlink" title="为什么要重用？"></a>为什么要重用？</h3><p>为了做到显示和数据分离，UITableViewCell的实现而且不是为每一个数据项创建一个tableCell，是仅仅创建屏幕可显示最大个数的cell，然后反复使用这些cell，对cell做单独的显示配置，来达到既不影响显示效果，又能充分节省内存的目的；当屏幕滚动出现新Cell的时候，就会调用方法获取新出现的Cell,而有的Cell则会滚动到屏幕的外面</p><h3 id="如何实现Cell的重用？"><a href="#如何实现Cell的重用？" class="headerlink" title="如何实现Cell的重用？"></a>如何实现Cell的重用？</h3><p>通过UITableView的<code>dequeueReusableCellWithIdentifier</code>函数实现，从字面理解就是<code>出列可重用的Cell</code>，简单来说就是有一个Cell池，里面存放了之前从屏幕滚动消失的Cell</p><h3 id="重用机制的实现原理"><a href="#重用机制的实现原理" class="headerlink" title="重用机制的实现原理"></a>重用机制的实现原理</h3><p>进入UITableView的头文件可以发现：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">UITableViewCell</span> *&gt; *visibleCells;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="built_in">UITableViewCell</span> *&gt; * reusableTableCells;</span><br></pre></td></tr></table></figure></p><p><code>visibleCells</code>内显示当前显示的cells<br><code>reusableTableCells</code>保存可重用的cells，可复用的cell使用字典是因为可复用的可能cell不只有一种样式，这里需要字典指定key(也就是reuseIdentifier)来查找是否有可重用样式。</p><ul><li>执行思路：<br>tableView显示之初，reusableTableCells为空，假如一个界面显示5个Cell，界面慢慢向上拖动，当cell1完全从屏幕上小时的时，cell6（cell6是新创建的cell,因为reusableTableCells为空）完全展示在界面上时；cell1移入到reusableTableCells中，继续拖动,展示cell7会从reusableTableCells中取出缓存的cell1,以此类推…</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>并非仅仅有拖动超出屏幕的时候才会更新reusableTableCells,<code>reloadData</code>和<code>reloadRowsAtIndex</code>时也会更新并操作reusableTableCells</p><h2 id="UITableViewCell的性能优化"><a href="#UITableViewCell的性能优化" class="headerlink" title="UITableViewCell的性能优化"></a>UITableViewCell的性能优化</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/uitableviewcell_optimize.png" alt=""></p><h2 id="扩展：UITableView-delegate-dataSource方法执行顺序"><a href="#扩展：UITableView-delegate-dataSource方法执行顺序" class="headerlink" title="扩展：UITableView delegate/dataSource方法执行顺序"></a>扩展：UITableView delegate/dataSource方法执行顺序</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="comment">//有多少组</span></span><br><span class="line">-(<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> * )tableView</span><br><span class="line"><span class="number">2.</span><span class="comment">//cell 页眉高度</span></span><br><span class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> * )tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line"><span class="number">3.</span><span class="comment">//cell页脚高度</span></span><br><span class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> * )tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line"><span class="number">4.</span><span class="comment">//每组有多少行</span></span><br><span class="line">-(<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> * )tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line"><span class="number">5.</span><span class="comment">//cell高度</span></span><br><span class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> * )tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> )indexPath</span><br><span class="line"><span class="number">6.</span><span class="comment">//布局UITableviewcell</span></span><br><span class="line">-(<span class="built_in">UITableViewCell</span> )tableView:(<span class="built_in">UITableView</span> * )tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> * )indexPath</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iOS-TableView的重用机制&quot;&gt;&lt;a href=&quot;#iOS-TableView的重用机制&quot; class=&quot;headerlink&quot; title=&quot;iOS-TableView的重用机制&quot;&gt;&lt;/a&gt;iOS-TableView的重用机制&lt;/h2&gt;&lt;h3 id=&quot;什
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="UITableView" scheme="http://techbird.me/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title>iOS-pthread使用&amp;__bridge</title>
    <link href="http://techbird.me/2018/05/18/ios-thread-use-pthread/"/>
    <id>http://techbird.me/2018/05/18/ios-thread-use-pthread/</id>
    <published>2018-05-18T11:41:58.000Z</published>
    <updated>2018-05-23T12:36:48.963Z</updated>
    
    <content type="html"><![CDATA[<p>pthread是POSIX thread的简写，跨平台多线程的C语言开发框架,pthread是实现多线程的技术方案之一，NSThread就是对它的封装。</p><h2 id="pthread开启子线程的函数介绍"><a href="#pthread开启子线程的函数介绍" class="headerlink" title="pthread开启子线程的函数介绍"></a>pthread开启子线程的函数介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;pthread.h&gt;</span><br><span class="line">int pthread_create(pthread_t * __restrict, const pthread_attr_t * __restrict,</span><br><span class="line">   void *(*)(void *), void * __restrict);</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>pthread_t *</code> : 线程标示符，传入指向线程标示符的指针地址。<br><code>pthread_attr_t *</code> :线程属性，传入指向线程属性的指针地。<br><code>void*( * )(void * )</code> :新线程要执行的函数(任务)，传入函数地址，即函数名。<br><code>void *</code>:传入到函数的参数。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>返回int类型的值,0表示创建新线程成功,反之,创建新线程失败,返回失败的编号。</li><li>C语言框架里面并不是非零即真原则；因为他们认为成功的结果只有一个，但是失败的原因有很多。</li></ul><h2 id="pthread开启子线程的函数实现"><a href="#pthread开启子线程的函数实现" class="headerlink" title="pthread开启子线程的函数实现"></a>pthread开启子线程的函数实现</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pthreadDemo &#123;</span><br><span class="line"><span class="comment">// 新线程的标示符</span></span><br><span class="line">pthread_t ID;</span><br><span class="line"><span class="comment">// 创建子线程</span></span><br><span class="line"><span class="keyword">int</span> result = pthread_create(&amp;ID, <span class="literal">NULL</span>, demo, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 判断创建子线程是否成功</span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(@“success”);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(@“failure”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子线程异步执行的函数-任务"><a href="#子线程异步执行的函数-任务" class="headerlink" title="子线程异步执行的函数/任务"></a>子线程异步执行的函数/任务</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * demo(<span class="keyword">void</span> *param)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"demo %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>C 语言中 <code>void *</code> 与 OC 中的 id 类似。</li><li><code>void *(*)(void *)</code> 中的<code>(*)</code> 表示指向函数的指针，即函数指针，即函数名或者函数地址。</li></ul><h2 id="bridge"><a href="#bridge" class="headerlink" title="__bridge"></a><em>__bridge</em></h2><p>用作于普通的 C 指针与 OC 指针的转换，不做任何操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void *p;</span><br><span class="line">NSObject *objc = [[NSObject alloc] init];</span><br><span class="line">p = (__bridge void*)objc;</span><br></pre></td></tr></table></figure></p><p>这里的 <code>void * p</code> 指针直接指向了 <code>NSObject * objc</code> 这个 OC 类，p 指针并不拥有 OC 对象，跟普通的指针指向地址无疑。所以这个出现了一个问题，OC 对象被释放，p 指针也就释放了。</p><h2 id="bridge-retained"><a href="#bridge-retained" class="headerlink" title="__bridge_retained"></a><em>__bridge_retained</em></h2><p>用作 C 指针与 OC 指针的转换，并且也用拥有着被转换对象的所有权</p><h2 id="bridge-transfer"><a href="#bridge-transfer" class="headerlink" title="__bridge_transfer"></a><em>__bridge_transfer</em></h2><p>用作 C 指针与 OC 指针的转换，并在拥有对象所有权后将原先对象所有权释放。(只支持 C 指针转换 OC 对象指针)<br>其实可以理解为先将对象的引用计数器 +1，然后再将引用计数器 -1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pthread是POSIX thread的简写，跨平台多线程的C语言开发框架,pthread是实现多线程的技术方案之一，NSThread就是对它的封装。&lt;/p&gt;
&lt;h2 id=&quot;pthread开启子线程的函数介绍&quot;&gt;&lt;a href=&quot;#pthread开启子线程的函数介绍&quot; 
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Category的使用和优缺点</title>
    <link href="http://techbird.me/2018/05/18/ios-category-use-merit-and-demerit/"/>
    <id>http://techbird.me/2018/05/18/ios-category-use-merit-and-demerit/</id>
    <published>2018-05-18T06:30:47.000Z</published>
    <updated>2018-05-18T12:19:59.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Category"><a href="#什么是Category" class="headerlink" title="什么是Category?"></a>什么是Category?</h2><p>分类就是对一个类的功能进行扩展，让这个类能够适应不同情况的需求；在实际开发中我们都会对系统的一些常用类进行扩展，例如：NSString,Button,Label等；简单来说类别是一种为现有的类添加新方法的方式。利用OC的动态运行时分配机制，category提供了一种比继承更为简洁的方法来对类进行扩展，无需创建对象的子类就能为现有的类添加新的方法，category可以为任何已经存在的类添加方法，包括系统的框架UIKit等。</p><h2 id="Category的优点："><a href="#Category的优点：" class="headerlink" title="Category的优点："></a>Category的优点：</h2><ul><li>可以将类的实现分散到多个不同的文件或者不同的框架中，方便代码的管理；也可以对框架提供类的扩展，把不同的功能组织到不同的category里，从而按需加载想要的category。</li><li>创建对私有方法的前向引用：如果其他类中的方法未实现时，或者在访问该类私有方法时编译器报错时；在类别中声明这些方法（不必提供方法实现）从而绕过编译器不会再产生警告或者错误。</li><li>向对象添加非正式协议：创建一个NSObject的类别成为“创建一个非正式协议”，因为可以作为任何类的委托对象使用（声明私有方法）。</li></ul><p>apple的SDK中就大面积的使用了category这一特性。比如UIKit中的UIView。apple把不同的功能API进行了分类，这些分类包括UIViewGeometry、UIViewHierarchy、UIViewRendering等。<br>不过除了apple推荐的使用场景，广大开发者脑洞大开，还衍生出了category的其他几个使用场景：</p><pre><code>1. 模拟多继承（另外可以模拟多继承的还有protocol）2. 把framework的私有方法公开</code></pre><h2 id="Category的局限性："><a href="#Category的局限性：" class="headerlink" title="Category的局限性："></a>Category的局限性：</h2><ul><li>category只能给某个已有的类扩充方法，不能扩充成员变量。</li><li>category中也可以添加属性，只不过@property只会生成<code>setter</code>和<code>getter</code>的声明，不会生成实现以及成员变量。</li><li>如果category中的方法和类中原有的方法同名，运行时会优先调用category中的方法。也就是，category中的方法会<code>覆盖</code>掉类中原有的方法。所以开发中尽量保证不要让分类中的方法和原有类中的方法名相同;避免出现这种情况的解决方案是给分类的方法名统一添加前缀。比如<code>category_xxx</code>。</li><li>如果多个category中存在同名的方法，运行时到底调用那个方法由编译器决定，最后一个参与编译的方法会被调用。</li></ul><p>如下：给UIView添加两个category（one和two）并且给这两个分类都添加了名为log的方法</p><ul><li><p>UIView+One</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIView+One.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span> (<span class="title">One</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)log &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"调用One分类的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>UIView+Two</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIView+Two.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIView</span> (<span class="title">Two</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)log &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"调用One分类的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>在UIViewController中引用这两个分类的头文件并调用log方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"UIView+One.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIView+Two.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIView</span> * view = [<span class="built_in">UIView</span> new];</span><br><span class="line">    [view log];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>当编译顺序如下图时输出：<br><img src="http://p7xd6yrmx.bkt.clouddn.com/compile_last_one.png" alt=""></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-18 15:23:13.379081+0800 CategoryDemo[2373:700484] 调用One分类的方法</span><br></pre></td></tr></table></figure></li><li><p>将UIView+One.m移动到UIView+Two.m上面，编译顺序如下图时输出：<br><img src="http://p7xd6yrmx.bkt.clouddn.com/compile_last_two.png" alt=""></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-18 15:27:25.008682+0800 CategoryDemo[2441:715950] 调用Two分类的方法</span><br></pre></td></tr></table></figure></li></ul><h2 id="调用优先级"><a href="#调用优先级" class="headerlink" title="调用优先级"></a>调用优先级</h2><p>Category-&gt;本类-&gt;父类</p><h2 id="为什么Category不能添加成员变量？"><a href="#为什么Category不能添加成员变量？" class="headerlink" title="为什么Category不能添加成员变量？"></a>为什么Category不能添加成员变量？</h2><p>Objective-C的类是由<code>Class</code>类型来表示的，它实际上是一个指向<code>objc_class</code>结构体的指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> * <span class="title">Class</span>;</span></span><br></pre></td></tr></table></figure></p><p>objc_class结构体的定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct objc_class &#123;</span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">#if !__OBJC2__</span><br><span class="line">    Class super_class                       OBJC2_UNAVAILABLE;  // 父类</span><br><span class="line">    const char *name                        OBJC2_UNAVAILABLE;  // 类名</span><br><span class="line">    long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0</span><br><span class="line">    long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识</span><br><span class="line">    long instance_size                      OBJC2_UNAVAILABLE;  // 该类的实例变量大小</span><br><span class="line">    struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 该类的成员变量链表</span><br><span class="line">    struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表</span><br><span class="line">    struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存</span><br><span class="line">    struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表</span><br><span class="line">#endif</span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure></p><p>在上面的<code>objc_class</code>结构体中，<code>ivars</code>是<code>objc_ivar_list</code>（成员变量列表）指针；<code>methodLists</code>是指向<code>objc_method_list</code>指针的指针。<br>在<code>Runtime</code>中，<code>objc_class</code>的大小是<code>固定</code>的，不可能往这个结构体中添加数据，只能修改。所以<code>ivars</code>指向的是一个固定区域，只能修改成员变量的值，不能增加成员变量的个数。<br><code>methodLists</code>是一个<code>二维数组</code>，所以可以修改<code>*methodLists</code>的值来增加成员变量方法，虽然没办法扩展<code>methodLists</code>指向的内存区域，却可以改变这个内存区域的值（存储的是指针），因此可以动态添加方法，不能添加成员变量。</p><h2 id="Category中能添加属性吗？"><a href="#Category中能添加属性吗？" class="headerlink" title="Category中能添加属性吗？"></a>Category中能添加属性吗？</h2><p>Category中不能直接添加成员变量，那么可以添加属性吗？<br>需要从Category的结构体开始分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct category_t &#123;</span><br><span class="line">    const char *name;  //类的名字</span><br><span class="line">    classref_t cls;  //类</span><br><span class="line">    struct method_list_t *instanceMethods;  //category中所有给类添加的实例方法的列表</span><br><span class="line">    struct method_list_t *classMethods;  //category中所有添加的类方法的列表</span><br><span class="line">    struct protocol_list_t *protocols;  //category实现的所有协议的列表</span><br><span class="line">    struct property_list_t *instanceProperties;  //category中添加的所有属性</span><br><span class="line">&#125; category_t;</span><br></pre></td></tr></table></figure></p><p>从Category的结构体定义<code>也</code>可以看出:Category可以添加<code>实例方法</code>、<code>类方法</code>、<code>协议</code>、<code>属性</code>，但不能添加<code>成员变量</code>（实例变量）</p><h3 id="为什么网上很多人说Category不可以添加属性"><a href="#为什么网上很多人说Category不可以添加属性" class="headerlink" title="为什么网上很多人说Category不可以添加属性?"></a>为什么网上很多人说Category不可以添加属性?</h3><p>实际上，category是可以添加属性的，同样可以使用<code>@property</code>，但是不会生成带下划线的成员变量也不会生成属性getter和setter方法的实现。所以，尽管添加了属性，也无法使用点语法调用getter和setter方法（实际上，点语法是可以写的，只不过在运行时调用到这个方法的时候会报Unrecognised selector send to instance的错误），但可以使用Runtime去实现Category为已有的类添加新的属性并生成getter和setter方法</p><h3 id="为什么不能为Category手动添加一个下划线开头的成员变量"><a href="#为什么不能为Category手动添加一个下划线开头的成员变量" class="headerlink" title="为什么不能为Category手动添加一个下划线开头的成员变量"></a>为什么不能为Category手动添加一个下划线开头的成员变量</h3><p>成员变量是一个类的东西，而分类本身就不是一个类，它并没有自己的isa指针，分类本来就是OC里通过运行时动态的为一个类添加属性和方法等，不是一个真正的类无法添加成员变量。</p><blockquote><p>可以使用Runtime技术中的关联对象可以为类别添加属性</p></blockquote><h2 id="两点注意："><a href="#两点注意：" class="headerlink" title="两点注意："></a>两点注意：</h2><ol><li>当category中的方法和原类中的方法同名时，category中的方法并没有完全替换掉原类中的方法，也就是说如果category和原类中都有一个methodA方法，那么category附加完成之后，类的方法里面会有两个methodA，实际上category的方法只是被放到新方法列表的前面，而原来类的方法只是被放到了新方法列表的后面，这也就是通常说的<code>覆盖同名方法</code>；这是因为运行时在查找方法的时候是顺着方法列表顺序查找的，它只要已找到对应名字的方法，就直接调用不会再往后面找了。</li><li>由于category的实现原理，和Objc的动态绑定有很强的关系，所以实际上类的扩展比较占用启动时间，因尽量合并一些在工程，架构上没有太大意义的扩展，会对启动有一定的优化作用。</li></ol><h2 id="扩展：成员变量和属性的区别？"><a href="#扩展：成员变量和属性的区别？" class="headerlink" title="扩展：成员变量和属性的区别？"></a>扩展：成员变量和属性的区别？</h2><p>@property声明的属性默认会生成一个以下划线开头的成员变量，同事也会生成getter/setter方法。但这仅仅是在iOS5之后，苹果才推出的一个机制。在一些比较老的项目经常可以看到一大括号里面定义了成员变量，同时用了@property声明，而且还在@implementation中使用了@synthesize方法。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 1.声明成员变量</span></span><br><span class="line">    <span class="built_in">NSString</span> * myString;  </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2.在用@property</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> * myString;  </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"><span class="comment">//3.最后在@implementation中用synthesize生成set方法</span></span><br><span class="line"><span class="keyword">@synthesize</span> myString;   </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>实际上，发生这种状况的根本原因是苹果将默认编译器从GCC转换为LLVM（low level virtual machine）后，才不再需要为属性声明实例变量了。<br>在没有更改之前，属性的正常写法需要 <code>成员变量 + @property + @synthesize成员变量</code>三个步骤<br>如果我们只写成员变量+@property<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GBViewController</span> :<span class="title">UIViewController</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> * myString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> * myString;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>这时，编译器会警告：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Autosynthesized property <span class="string">'myString'</span> will use synthesized instance variable <span class="string">'_myString'</span>, not existing instance variable <span class="string">'myString'</span></span><br></pre></td></tr></table></figure></p><p>但更换为<code>LLVM</code>之后，编译器在编译过程中发现没有生成实例变量时，就会生成一个下划线开头的实例变量。因此现在我们不必在声明一个实例变量（<strong>注意</strong>：是不必要，不是不可以）<br>对于<code>@synthesize</code>我们要明白，<code>@synthesize</code>不仅可以帮助生成setter/getter方法；同时还有一个作用就是可以指定与属性对应的实例变量<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> myString = _xxx；</span><br></pre></td></tr></table></figure></p><p>那么<code>self.myString</code>其实是操作的实例变量_xxx，而不是<code>_myString</code>了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Category&quot;&gt;&lt;a href=&quot;#什么是Category&quot; class=&quot;headerlink&quot; title=&quot;什么是Category?&quot;&gt;&lt;/a&gt;什么是Category?&lt;/h2&gt;&lt;p&gt;分类就是对一个类的功能进行扩展，让这个类能够适应不同情况的需求；
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="category" scheme="http://techbird.me/tags/category/"/>
    
  </entry>
  
  <entry>
    <title>strong、weak、copy、retain和assign的区别</title>
    <link href="http://techbird.me/2018/05/18/ios-keywors-of-strong-weak-copy-retain-assign/"/>
    <id>http://techbird.me/2018/05/18/ios-keywors-of-strong-weak-copy-retain-assign/</id>
    <published>2018-05-18T06:12:00.000Z</published>
    <updated>2018-05-18T06:25:11.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="assign："><a href="#assign：" class="headerlink" title="assign："></a>assign：</h2><p><code>assign</code>一般用来修饰基本的数据类型，包括基础数据类型（NSInteger,CGFloat）和C语言数据类型（int,float,double,char）等等。因为assign声明的属性，是不会增加引用计数的，也就是说声明的属性释放后也就没有了，及时其他对象引用了它也不会保留，只会造成crash。但是及时被释放，指针却还在，成为了<code>野指针</code>，如果新的对象被分配到了这个内存地址上，又会造成crash。所以一般只用来声明基本的数据类型，因为它们会被分配到<code>栈区</code>上，而栈取由系统<code>自动管理</code>，不会造成野指针。</p><h2 id="retain："><a href="#retain：" class="headerlink" title="retain："></a>retain：</h2><p>与assign相对，我们要解决<code>对象</code>被其他对象引用后释放造成的问题，就需要用<code>retain</code>来声明。使用retain声明的对象会<code>更改引用计数</code>，每次被引用，引用计数都会<code>+1</code>，释放后就会<code>-1</code>。即使这个对象本身被释放了，只要还有对象在引用它，该对象就会<code>仍然持有</code>，不会出现任何问题。并且只有当引用<code>计数为0时</code>，就会被<code>dealloc</code>析构函数回收进内存。</p><h2 id="copy："><a href="#copy：" class="headerlink" title="copy："></a>copy：</h2><p>最常见到的copy的声明使用是 NSString 等。copy与retain的<code>区别</code>在于：retain是拷贝内存指针地址，而copy是拷贝对象本身；也就是说retain是<code>浅复制</code>，copy是<code>深复制</code>；如果是浅复制，当修改对象值时，都会被修改，而深复制不会。之所以在<code>NSString</code>这一类有<code>可变类型对象</code>的身上使用<code>copy</code>关键字，是因为他们有可能和对应的可变类型如 <code>NSMutableString</code> 之间进行赋值操作，为了防止内容被改变，使用copy去深复制一份。copy工作由copy方法执行，此属性只对那些实现了 <code>NSCopying</code> 协议的<code>对象类型</code>有效。</p><h2 id="weak："><a href="#weak：" class="headerlink" title="weak："></a>weak：</h2><p>weak是由ARC新引入的对象变量属性，weak类似于assign，叫<code>弱引用</code>，也是不增加引用计数，不同在于week指向对象类型时，当对象被释放会指向nil，而assign则会造成野指针。一般只有在防止循环引用时候使用；比如父类引用了子类，子类又引用父类；IBOutlet、Delegate等一般就是使用week，这是因为他们可能会在类外部被调用，防止循环应用。</p><h2 id="strong："><a href="#strong：" class="headerlink" title="strong："></a>strong：</h2><p>strong也是由ARC新引入的对象变量属性，在ARC下,用strong代替了retain，叫<code>强引用</code>，会增加引用计数。，所有的局部变量代码中我们声明的变量默认都是强引用，不需要再额外使用<code>__strong</code>来修饰。</p><h2 id="什么时候用stong-weak"><a href="#什么时候用stong-weak" class="headerlink" title="什么时候用stong/weak"></a>什么时候用<code>stong</code>/<code>weak</code></h2><ul><li>根视图和父视图需要使用<code>strong</code>; 子视图使用<code>weak</code></li><li>没有强指针指向的对象使用<code>strong</code>; 有强指针指向的可以可以<code>weak</code></li></ul><h2 id="strong-weak-unsafe-unretained-autoreleasing-的含义"><a href="#strong-weak-unsafe-unretained-autoreleasing-的含义" class="headerlink" title="__strong,__weak,__unsafe_unretained,__autoreleasing 的含义"></a><code>__strong,__weak,__unsafe_unretained,__autoreleasing</code> 的含义</h2><p>在ARC情况下，对象类型的变量将有所有权修饰符<br><code>__strong</code>: 是缺省的关键词。<br><code>__weak</code>: 声明了一个可以自动nil化的引用。<br><code>__unsafe_unretained</code>: 声明一个弱引用，但是不会自动nil化，也就是说，如果所指向的内存区域被释放了，这个指针就是一个野指针了。<br><code>__autoreleasing</code>: 用来修饰一个函数的参数，这个参数在函数返回的时候会被自动释放。</p><p><code>ARC</code>声明属性时，对于<code>基本数据类型</code>默认关键字是 （atomic,readwrite,assign）<br><code>ARC</code>声明属性时，对于普通的<code>OC对象</code>默认关键字是 （atomic,readwrite,strong）</p><ul><li>示例<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">int</span> supportOrientation;           默认是<span class="keyword">assign</span>，因为是基础数据类型，必须是<span class="keyword">assign</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">UIImage</span>* rightImage;                                     默认是atomic</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) bolo_BasePlayerControlView* ctrlView;            默认是<span class="keyword">strong</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;WatchVideoDetailDelegate&gt; delegate;         代理使用<span class="keyword">weak</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><p>LLVM官网给出的一些示意，ARC里也可以使用retain等关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">assign implies __unsafe_unretained ownership.</span><br><span class="line">copy implies __strong ownership, as well as the usual behavior of copy semantics on the setter.</span><br><span class="line">retain implies __strong ownership.</span><br><span class="line">strong implies __strong ownership.</span><br><span class="line">unsafe_unretained implies __unsafe_unretained ownership.</span><br><span class="line">weak implies __weak ownership.</span><br></pre></td></tr></table></figure></p><p>assign 等同于unsafe_retained<br>copy的作用和MRC一样，同时又有strong的效果<br>retain等同于strong<br>weak和unsafe_unretained的区别在于：weak降被释放指针赋值为nil，而unsafe_unretained则会成为野指针</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;assign：&quot;&gt;&lt;a href=&quot;#assign：&quot; class=&quot;headerlink&quot; title=&quot;assign：&quot;&gt;&lt;/a&gt;assign：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;assign&lt;/code&gt;一般用来修饰基本的数据类型，包括基础数据类型（NSIntege
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="keywords" scheme="http://techbird.me/tags/keywords/"/>
    
  </entry>
  
  <entry>
    <title>iOS-零散的小知识点收集</title>
    <link href="http://techbird.me/2018/05/18/ios-scatter-point-collect/"/>
    <id>http://techbird.me/2018/05/18/ios-scatter-point-collect/</id>
    <published>2018-05-18T02:20:16.000Z</published>
    <updated>2018-05-18T12:38:31.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APP启动程序执行过程"><a href="#APP启动程序执行过程" class="headerlink" title="APP启动程序执行过程"></a>APP启动程序执行过程</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><h3 id="执行UIApplicationMain函数"><a href="#执行UIApplicationMain函数" class="headerlink" title="执行UIApplicationMain函数"></a>执行UIApplicationMain函数</h3><ol><li>创建UIApplication对象</li><li>创建UIApplicationDelegate对象并复制</li><li>读取配置文件info.plist，设置程序启动的一些属性</li><li>创建应用程序的Main Runloop循环</li></ol><h3 id="UIApplicationDelegate对象开始处理监听到的事件"><a href="#UIApplicationDelegate对象开始处理监听到的事件" class="headerlink" title="UIApplicationDelegate对象开始处理监听到的事件"></a>UIApplicationDelegate对象开始处理监听到的事件</h3><p>1.程序启动成功之后，首先调用application:didFinishLaunchingWithOptions:方法，如果info.plist文件中配置了启动storyboard文件名，则加载storyboard文件。如果没有配置，则根据代码来创建UIWindow—&gt;UIWindow的rootViewController–&gt;显示</p><h2 id="类方法initialize"><a href="#类方法initialize" class="headerlink" title="类方法initialize"></a>类方法initialize</h2><ul><li>会在类第一次被使用时调用，且只会调用一次</li><li>此方法的调用是线程安全的</li></ul><h2 id="loadView的注意事项"><a href="#loadView的注意事项" class="headerlink" title="loadView的注意事项"></a>loadView的注意事项</h2><ol><li>用于加载指定的视图，一旦重写了这个方法，Storyboard里面就不会去加载根视图了</li><li>先于<code>viewDidLoad</code>调用</li><li>不可以调用<code>super.loadView()</code></li><li>当<code>self.view == nil</code>时回调用此方法</li></ol><h2 id="ViewController的生命周期"><a href="#ViewController的生命周期" class="headerlink" title="ViewController的生命周期"></a>ViewController的生命周期</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F01.1d4fa57c6b9841bebc26fe8908fe6051.png" alt=""></p><ul><li><code>loadView</code>：用于加载制定的根试图</li><li><code>viewDidLoad</code>：试图加载完毕</li><li><code>viewWillAppear</code>：界面即将显示在屏幕上</li><li><code>viewDidAppear</code>：界面已经完全渲染在屏幕上</li><li><code>viewWillDisappear</code>：界面即将从屏幕上消失</li><li><code>viewDidDisappear</code>：界面已经完全消失</li><li><code>dealloc</code>：控制器销毁</li></ul><h2 id="stringWithFormat-和-initWithFormat-区别（关于内存，ARC，释放，性能来说）"><a href="#stringWithFormat-和-initWithFormat-区别（关于内存，ARC，释放，性能来说）" class="headerlink" title="stringWithFormat 和 initWithFormat 区别（关于内存，ARC，释放，性能来说）"></a>stringWithFormat 和 initWithFormat 区别（关于内存，ARC，释放，性能来说）</h2><ul><li><code>+stringWithFormat</code>:类方法，返回一个<code>autorelease</code>的NSString实例，不用手动release，在自动释放池中会自动释放。</li><li><code>-initWithFormat</code>:实例方法，返回一个自己alloc申请内存的NSString实例，根据OC内存管理黄金法则，管杀管埋，它则需要自己手动release。</li><li><strong>小结</strong>：这两个方法只是在没有使用ARC的时候有所不同，一个需要手动release一个则是自动进入autoreleasepool，所以在使用ARC的时候他们俩几乎没有什么区别。</li></ul><h2 id="synthesize是啥？什么情况下使用？"><a href="#synthesize是啥？什么情况下使用？" class="headerlink" title="@synthesize是啥？什么情况下使用？"></a>@synthesize是啥？什么情况下使用？</h2><ul><li>首先一旦重写来属性的setter和getter方法后,系统不再自动生成带下划线的成员变量,而这行代码会创造一个带下划线前缀的实例变量名,同时使用这个属性生成getter 和 setter 方法。</li><li>使用<code>@synthesize</code> 只有一个目的——给实例变量起个别名,或者说为同一个变量添加两个名字。</li><li>如果要阻止自动合成，记得使用 <code>@dynamic</code> 。经典的使用场景是你知道已经在某处实现了getter/setter 方法,而编译器不知道的情况。</li><li>如何使用：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synthesize</span> obj = _obj;</span><br></pre></td></tr></table></figure></li></ul><h2 id="栈区-堆区-常量区"><a href="#栈区-堆区-常量区" class="headerlink" title="栈区/堆区/常量区"></a>栈区/堆区/常量区</h2><ul><li>操作内存的栈区速度快;栈区存储空间地址是连续的</li><li>操作内存的常量区速度快;内存空间只开辟一次</li><li>操作内存的堆区速度相对栈区和常量区要慢些;堆区内存空间不连续,需要寻址的过程<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储在栈区</span></span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 存储在常量区  </span></span><br><span class="line"> <span class="built_in">NSString</span> *str1 = <span class="string">@"hello"</span>;</span><br><span class="line"><span class="comment">// 存储在堆区</span></span><br><span class="line"> <span class="built_in">NSString</span> *str2 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"hello_%d"</span>,i];</span><br></pre></td></tr></table></figure></li></ul><h2 id="NSUInteger和NSInteger的区别"><a href="#NSUInteger和NSInteger的区别" class="headerlink" title="NSUInteger和NSInteger的区别"></a><code>NSUInteger</code>和<code>NSInteger</code>的区别</h2><ul><li><code>NSUInteger</code> 无符号整数(没有负数)用 <code>%tu</code><br><code>%tu</code>NSUInteger的占位符，可以适配 NSUInteger的32位设备和64位设备<br>32位设备: NSUInteger是<code>无符号的int</code> (无符号表示没有正负数)<br>64位设备: NSUInteger是<code>无符号的long</code></li><li><code>NSInteger</code>有符号整数(有正负数)用 <code>%zd</code><br><code>%zd</code>NSInteger的占位符，可以适配 NSInteger的32位设备和64位设备<br>32位设备: NSInteger是<code>有符号的int</code> (有符号表示有正负数)<br>64位设备: NSInteger是<code>有符号的long</code></li><li>以上这种设计是为了自适应32位和64位CPU的架构.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;APP启动程序执行过程&quot;&gt;&lt;a href=&quot;#APP启动程序执行过程&quot; class=&quot;headerlink&quot; title=&quot;APP启动程序执行过程&quot;&gt;&lt;/a&gt;APP启动程序执行过程&lt;/h2&gt;&lt;h3 id=&quot;main函数&quot;&gt;&lt;a href=&quot;#main函数&quot; cla
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C-Block</title>
    <link href="http://techbird.me/2018/05/10/oc-block/"/>
    <id>http://techbird.me/2018/05/10/oc-block/</id>
    <published>2018-05-10T03:21:20.000Z</published>
    <updated>2018-05-18T03:25:26.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Apple 在iOS4.0之后推出Block，它本身封装了一段代码并可以将这段代码当做变量，参数，属性，数据类型，函数（匿名），代码块（只有在被调用时才会执行）等等，使用方式灵活，功能十分强大。</p><h1 id="Block的简单使用"><a href="#Block的简单使用" class="headerlink" title="Block的简单使用"></a>Block的简单使用</h1><h2 id="定义Block"><a href="#定义Block" class="headerlink" title="定义Block"></a>定义Block</h2><ul><li><p>无参无返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span>(^block)() = ^()&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a no param and no return of block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure></li><li><p>有参无返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>(^block)(<span class="built_in">NSString</span> * ) = ^(<span class="built_in">NSString</span> * param)&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a has param and no return of block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block(<span class="string">@"param"</span>);</span><br></pre></td></tr></table></figure></li><li><p>有参有返回值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *(^block)(<span class="built_in">NSString</span> * ) = ^(<span class="built_in">NSString</span> * param)&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"this is a has param and return of block"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">&#125;;</span><br><span class="line">block(<span class="string">@"param"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="定义Block的快捷方式"><a href="#定义Block的快捷方式" class="headerlink" title="定义Block的快捷方式"></a>定义Block的快捷方式</h2><blockquote><p>Block 的定义可以借助键入 inlineBlock 速记.</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inlineBlock</span></span><br><span class="line">returnType (^blockName)(parameterTypes) = ^(parameters) &#123;</span><br><span class="line">   statements</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Block定义成属性"><a href="#Block定义成属性" class="headerlink" title="Block定义成属性"></a>Block定义成属性</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span>(^block)();</span><br></pre></td></tr></table></figure><h2 id="Block作参数"><a href="#Block作参数" class="headerlink" title="Block作参数"></a>Block作参数</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)demo04&#123;</span><br><span class="line"> <span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"block become param"</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> [<span class="keyword">self</span> callbackWith:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)callbackWith:(<span class="keyword">void</span>(^)())block&#123;</span><br><span class="line"> <span class="comment">//调用外界传入的block</span></span><br><span class="line"> block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="typedef-定义Block"><a href="#typedef-定义Block" class="headerlink" title="typedef 定义Block"></a>typedef 定义Block</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^MyBlock)();</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">MyBlock block01 = ^&#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"block01"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block01();</span><br></pre></td></tr></table></figure><ul><li><p>小结：方便之处在于可以常用类型的Block可以用typedef来定义</p><h1 id="Block与外部变量"><a href="#Block与外部变量" class="headerlink" title="Block与外部变量"></a>Block与外部变量</h1><h2 id="Block内部访问-引用-外部变量"><a href="#Block内部访问-引用-外部变量" class="headerlink" title="Block内部访问/引用 外部变量"></a>Block内部访问/引用 外部变量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"><span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line">&#125;;</span><br><span class="line">num = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line">block();</span><br></pre></td></tr></table></figure></li><li><p><code>MRC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">018-05-10 12:33:49.178446+0800 BlockDemo[1825:245809] 0x7ffee31dc9dc 10</span><br><span class="line">2018-05-10 12:33:49.178655+0800 BlockDemo[1825:245809] &lt;__NSStackBlock__: 0x7ffee31dc9a8&gt; 0x7ffee31dc9dc 20</span><br><span class="line">2018-05-10 12:33:49.178770+0800 BlockDemo[1825:245809] 0x7ffee31dc9c8 10</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:36:47.248638+0800 BlockDemo[1887:256355] 0x7ffee517f9dc 10</span><br><span class="line">2018-05-10 12:36:47.248856+0800 BlockDemo[1887:256355] &lt;__NSMallocBlock__: 0x604000259530&gt; 0x7ffee517f9dc 20</span><br><span class="line">2018-05-10 12:36:47.249115+0800 BlockDemo[1887:256355] 0x604000259550 10</span><br></pre></td></tr></table></figure></li><li><p>小结<br>在block中访问外部的变量时，会自动拷贝到内存一份并开辟新的地址，这就是深拷贝</p></li></ul><h2 id="Block内部修改外部变量"><a href="#Block内部修改外部变量" class="headerlink" title="Block内部修改外部变量"></a>Block内部修改外部变量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"> <span class="keyword">void</span>(^block)() = ^&#123;</span><br><span class="line">   num = <span class="number">30</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> num = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line"> block();</span><br></pre></td></tr></table></figure><ul><li><p><code>MRC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:41:56.490868+0800 BlockDemo[2018:272473] 0x7ffee14519d8 10</span><br><span class="line">2018-05-10 12:41:56.491055+0800 BlockDemo[2018:272473] &lt;__NSStackBlock__: 0x7ffee1451980&gt; 0x7ffee14519d8 20</span><br><span class="line">2018-05-10 12:41:56.491165+0800 BlockDemo[2018:272473] 0x7ffee14519d8 30</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:43:13.402390+0800 BlockDemo[2047:277009] 0x7ffeea3149d8 10</span><br><span class="line">2018-05-10 12:43:13.402662+0800 BlockDemo[2047:277009] &lt;__NSMallocBlock__: 0x60400024da70&gt; 0x604000034cf8 20</span><br><span class="line">2018-05-10 12:43:13.402777+0800 BlockDemo[2047:277009] 0x604000034cf8 30</span><br></pre></td></tr></table></figure></li><li><p>小结<br>block内修改的外部变量，需要用<code>__block</code>修饰.在此后若被block访问修改，变量的内存地址会重新指向拷贝后开辟的新的内存地址.</p></li></ul><h2 id="验证一个想法"><a href="#验证一个想法" class="headerlink" title="验证一个想法"></a>验证一个想法</h2><blockquote><p>在<code>ARC</code>/<code>MRC</code>中block内<code>引用</code>外部变量地址如何在堆栈中变化，通过将Block自身作为自身的参数传入</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%p %d"</span>,&amp;num,num);</span><br><span class="line">   <span class="keyword">void</span>(^block)(<span class="keyword">void</span>(^)()) = ^(<span class="keyword">void</span>(^block2)())&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block2,&amp;num,num);</span><br><span class="line">   &#125;;</span><br><span class="line">   num = <span class="number">20</span>;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@ %p %d"</span>,block,&amp;num,num);</span><br><span class="line">   <span class="comment">//本身作为参数传入并输出指针对象的堆栈</span></span><br><span class="line">   block(block);</span><br></pre></td></tr></table></figure><ul><li>1.在<code>ARC</code>中block内引用外部变量地址如何在堆栈中变化，输出结果:</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:51:29.359318+0800 BlockDemo[2216:302301] 0x7ffee29ab9dc 10</span><br><span class="line">2018-05-10 12:51:29.359563+0800 BlockDemo[2216:302301] &lt;__NSMallocBlock__: 0x600000259230&gt; 0x7ffee29ab9dc 20</span><br><span class="line">2018-05-10 12:51:29.359708+0800 BlockDemo[2216:302301] &lt;__NSMallocBlock__: 0x600000259230&gt; 0x600000259250 10</span><br></pre></td></tr></table></figure><ul><li>2.在<code>MRC</code>中block内引用外部变量地址如何在堆栈中变化，输出结果:</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:46:27.120908+0800 BlockDemo[2153:287894] 0x7ffee8a699dc 10</span><br><span class="line">2018-05-10 12:46:27.121106+0800 BlockDemo[2153:287894] &lt;__NSStackBlock__: 0x7ffee8a699a8&gt; 0x7ffee8a699dc 20</span><br><span class="line">2018-05-10 12:46:27.121239+0800 BlockDemo[2153:287894] &lt;__NSStackBlock__: 0x7ffee8a699a8&gt; 0x7ffee8a699c8 10</span><br></pre></td></tr></table></figure><ul><li>小结：<br><code>ARC</code>下，永远在堆区中。<code>MRC</code>下永远在栈区中</li></ul><h1 id="block内存管理（MRC-ARC）"><a href="#block内存管理（MRC-ARC）" class="headerlink" title="block内存管理（MRC/ARC）"></a>block内存管理（MRC/ARC）</h1><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><h3 id="当函数体不变时"><a href="#当函数体不变时" class="headerlink" title="当函数体不变时"></a>当函数体不变时</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"hello world"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 22:59:07.637768+0800 BlockDemo[3288:930159] &lt;__NSGlobalBlock__: 0x10afa20d8&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>不引用任何外部变量的 block 保存在全局区 NSGlobalBlock，如果Block没有引用外部变量,那么这个Block的函数体内部包装的代码都不会发生变化,而且执行效率高,保存在全局区;(类似不变的字符串存在常量区)</p><h3 id="当函数体可变时（即访问修改外部变量时）"><a href="#当函数体可变时（即访问修改外部变量时）" class="headerlink" title="当函数体可变时（即访问修改外部变量时）"></a>当函数体可变时（即访问修改外部变量时）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"hello world %d"</span>, i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br></pre></td></tr></table></figure></li><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:03:01.082413+0800 BlockDemo[3349:946888] &lt;__NSMallocBlock__: 0x600000440090&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>引用外部变量的 block 保存在 :<br><code>ARC</code> : 堆区 NSMallocBlock<br><code>MRC</code> : 栈区 NSStackBlock<br>因此在定义 block 属性时应该使用 <code>copy</code> 关键字，将 block 从栈区复制到堆区</p></li></ul><h2 id="Block属性"><a href="#Block属性" class="headerlink" title="Block属性"></a>Block属性</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 block 属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^demoBlock)();</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)blockDemo &#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span>(^myBlock)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"hello world %d"</span>, i);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock);</span><br><span class="line"> <span class="comment">// 错误的写法，不会调用 setter 方法,MRC下,无法拷贝到堆区</span></span><br><span class="line"> <span class="comment">//`_demoBlock` = myBlock;</span></span><br><span class="line"> <span class="comment">// 正确的写法，调用 setter 方法，并且对 block 进行 copy</span></span><br><span class="line"> <span class="keyword">self</span>.demoBlock = myBlock;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.demoBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>MRC</code>下输出结果：会执行<code>copy</code>操作，从栈区拷贝到堆区</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:03:17.374375+0800 BlockDemo[1225:138257] &lt;__NSStackBlock__: 0x7ffee68509a8&gt;</span><br><span class="line">2018-05-10 12:03:17.374581+0800 BlockDemo[1225:138257] &lt;__NSMallocBlock__: 0x60000025dca0&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>ARC</code>下输出结果：不会执行<code>copy</code>操作,本身就在堆区</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-05-10 12:04:42.891691+0800 BlockDemo[1308:145791] &lt;__NSMallocBlock__: 0x6040002471d0&gt;</span><br><span class="line">2018-05-10 12:04:42.891902+0800 BlockDemo[1308:145791] &lt;__NSMallocBlock__: 0x6040002471d0&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注</strong> : 为了避免程序员的麻烦,在 ARC 中,定义了引用外部变量的 block,系统默认都是在堆区的!</p></blockquote><h2 id="copy关键字的探讨"><a href="#copy关键字的探讨" class="headerlink" title="copy关键字的探讨"></a>copy关键字的探讨</h2><h3 id="ARC-（为什么可以用copy-strong）"><a href="#ARC-（为什么可以用copy-strong）" class="headerlink" title="ARC （为什么可以用copy / strong）"></a>ARC （为什么可以用<code>copy / strong</code>）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)blockDemo</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span> (^task)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// ARC : 堆区 ==&gt; __NSMallocBlock__</span></span><br><span class="line"> <span class="comment">// ARC环境下,属性也是强引用,同时会copy</span></span><br><span class="line"> <span class="comment">// self.task = task;</span></span><br><span class="line"> <span class="comment">// ARC环境下,成员变量也是强引用,同时会copy</span></span><br><span class="line"> `_task` = task;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@"</span>,task,`_task`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:14:43.139413+0800 BlockDemo[3468:994925] &lt;__NSMallocBlock__: 0x60400024ea60&gt; -- &lt;__NSMallocBlock__: 0x60400024ea60&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>在<code>ARC</code>环境下,上述block本来就保存在堆区,给属性赋值的时候,调用<code>setter</code>方法时,只会给一个引用.故<code>ARC</code>下使用strong和copy的效果是一模一样的</p></li></ul><h3 id="MRC（为什么必须用copy）"><a href="#MRC（为什么必须用copy）" class="headerlink" title="MRC（为什么必须用copy）"></a>MRC（为什么必须用<code>copy</code>）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)blockDemo</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">void</span> (^task)() = ^ &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,num);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// MRC : 栈区 ==&gt; __NSStackBlock__</span></span><br><span class="line"> <span class="comment">// 这个赋值过程会copy,也会引用计数+1</span></span><br><span class="line"> <span class="comment">//    self.task = task;</span></span><br><span class="line"> <span class="comment">// 这个赋值过程不会copy,仅仅是引用计数+1,内存依然在栈区</span></span><br><span class="line"> `_task` = task;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@"</span>,task,`_task`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 23:17:25.352415+0800 BlockDemo[3528:1006735] &lt;__NSStackBlock__: 0x7ffee98cc9a8&gt; -- &lt;__NSStackBlock__: 0x7ffee98cc9a8&gt;</span><br></pre></td></tr></table></figure></li><li><p>小结：<br>在<code>MRC</code>环境下,调用成员变量进行赋值,仅仅是引用计数加1;不会进行<code>copy</code>操作. 所以内存依然在栈区.</p></li></ul><h3 id="面试时如何回答？"><a href="#面试时如何回答？" class="headerlink" title="面试时如何回答？"></a>面试时如何回答？</h3><p>当Block被引入到OC时 ，OC仍是MRC的管理内存模式 ，在MRC管理模式中，Block处于栈区，超出作用域就会被销毁 ，如果用一个属性来全局的记录这个Block，就必须满足两个条件：<br>1.这个属性必须对Block强引用<br>2.需要把Block拷贝到堆区<br>要满足以上两个条件就需要使用<code>copy</code>修饰符</p><h1 id="Block的循环引用"><a href="#Block的循环引用" class="headerlink" title="Block的循环引用"></a>Block的循环引用</h1><h2 id="满足什么条件会出现循环应用"><a href="#满足什么条件会出现循环应用" class="headerlink" title="满足什么条件会出现循环应用"></a>满足什么条件会出现循环应用</h2><ul><li>block和外部变量<code>互相强引用</code>导致出现循环引用,内存不能正常释放</li><li><strong>坑</strong>：不要在Block的内部使用成员变量(<code>_name</code>)，而要尽量使用属性，因为看不到<code>self</code>字段，会造成如果出现循环引用不容易发现的问题.<blockquote><p><strong>注</strong>：不是所有的 self. 都会出现循环引用 —— block 执行完毕就销毁，例如 UIView 的动画代码</p></blockquote></li></ul><h2 id="如何解决循环引用"><a href="#如何解决循环引用" class="headerlink" title="如何解决循环引用"></a>如何解决循环引用</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 __weak 修饰符,定义一个弱引用的对象</span></span><br><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Apple 在iOS4.0之后推出Block，它本身封装了一段代码并可以将这段代码当做变量，参数，属性，数据类型，函数（匿名），代码块（只有
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Block" scheme="http://techbird.me/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIWebView&amp;JSContext&amp;WKWebView</title>
    <link href="http://techbird.me/2018/05/08/ios-uiwebview-and-jscontext-and-wkwebview/"/>
    <id>http://techbird.me/2018/05/08/ios-uiwebview-and-jscontext-and-wkwebview/</id>
    <published>2018-05-08T09:33:53.000Z</published>
    <updated>2018-05-08T11:05:09.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h1><blockquote><p>A view that embeds web content in your app.</p></blockquote><h2 id="UIWebView-的JS注入"><a href="#UIWebView-的JS注入" class="headerlink" title="UIWebView 的JS注入"></a>UIWebView 的JS注入</h2><blockquote><p>案例 : 移除网页的某些不需要展示的标签</p></blockquote><ul><li>准备网页地址 : <a href="http://m.dianping.com/tuan/deal/5501525" target="_blank" rel="noopener">http://m.dianping.com/tuan/deal/5501525</a></li></ul><h3 id="浏览器终端中演示JS代码删除网页中元素"><a href="#浏览器终端中演示JS代码删除网页中元素" class="headerlink" title="浏览器终端中演示JS代码删除网页中元素"></a>浏览器终端中演示JS代码删除网页中元素</h3><ul><li>需要处理的网页<br><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180508-174926.png" alt=""></li></ul><hr><ul><li><p>网页处理的步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以删除导航为例 :</span><br><span class="line">  <span class="number">1.</span>先找到该节点 : <span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="number">2.</span>再找到父节点 : headerTag.parentNode</span><br><span class="line">  <span class="number">3.</span>最后用它的父节点删除该节点 : headerTag.parentNode.removeChild(headerTag);</span><br><span class="line"></span><br><span class="line">  合并: <span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];headerTag.parentNode.removeChild(headerTag);</span><br></pre></td></tr></table></figure></li><li><p>删除导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headerTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'header'</span>)[<span class="number">0</span>];headerTag.parentNode.removeChild(headerTag);</span><br></pre></td></tr></table></figure></li><li><p>删除底部悬停按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> footerBtnTag = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'footer-btn-fix'</span>)[<span class="number">0</span>]; footerBtnTag.parentNode.removeChild(footerBtnTag);</span><br></pre></td></tr></table></figure></li><li><p>删除底部布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> footerTag = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'footer'</span>)[<span class="number">0</span>]; footerTag.parentNode.removeChild(footerTag);</span><br></pre></td></tr></table></figure></li><li><p>处理之后的网页<br><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180508-175123.png" alt=""></p></li></ul><hr><h3 id="OC调用JS-实现-JS注入"><a href="#OC调用JS-实现-JS注入" class="headerlink" title="OC调用JS 实现 JS注入"></a>OC调用JS 实现 JS注入</h3><blockquote><p>OC和JS的交互需要使用UIWebView的代理方法作为桥梁实现</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:URL]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>网页加载完时调用的代理方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * ) webView;</span><br></pre></td></tr></table></figure></li><li><p>网页加载完成之后,调用JS代码的OC方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> * )stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> * )script;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JS注入的具体实现"><a href="#JS注入的具体实现" class="headerlink" title="JS注入的具体实现"></a>JS注入的具体实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView stringByEvaluatingJavaScriptFromString:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIWebView监听网页标签的点击-JS调用OC"><a href="#UIWebView监听网页标签的点击-JS调用OC" class="headerlink" title="UIWebView监听网页标签的点击(JS调用OC)"></a>UIWebView监听网页标签的点击(JS调用OC)</h2><blockquote><p>案例 : 点击网页某个标签跳转到苹果原生控制器<br>核心思想 : 拦截webView上所有的网络请求</p></blockquote><h3 id="JS调用OC需要实现的代理方法"><a href="#JS调用OC需要实现的代理方法" class="headerlink" title="JS调用OC需要实现的代理方法"></a>JS调用OC需要实现的代理方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>) webView:(<span class="built_in">UIWebView</span> * )webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> * )request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</span><br></pre></td></tr></table></figure><h3 id="JS注入给标签添加点击事件"><a href="#JS注入给标签添加点击事件" class="headerlink" title="JS注入给标签添加点击事件"></a>JS注入给标签添加点击事件</h3><ul><li><p>网页标签添加点击事件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br></pre></td></tr></table></figure></li><li><p>标签的点击事件注入到JS</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给标签添加点击事件</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView stringByEvaluatingJavaScriptFromString:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>给标签添加点击事件的目的 : 使标签可点击</li><li>点击事件发送网络请求的目的 : 可以拦截到标签的点击事件</li><li>自定义协议的目的 : 给事件设计一个特殊的标记,如果拦截到请求,就通过特殊的标记来区别要做的事情</li></ul></blockquote><h3 id="拦截webView上所有的网络请求-筛选请求"><a href="#拦截webView上所有的网络请求-筛选请求" class="headerlink" title="拦截webView上所有的网络请求,筛选请求"></a>拦截webView上所有的网络请求,筛选请求</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1.JS与OC交互的桥梁</span></span><br><span class="line"><span class="comment"> 2.可以拦截webView上所有的请求</span></span><br><span class="line"><span class="comment"> 3.给标签添加点击事件,点击事件主要就是发送请求;发送的请求是自定义协议的,目的是为了做标记.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> * )webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> * )request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,request.URL.absoluteString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到网页的请求地址</span></span><br><span class="line"><span class="built_in">NSString</span> * URLString = request.URL.absoluteString;</span><br><span class="line"><span class="comment">// 判断网页的请求地址协议是否是我们自定义的那个</span></span><br><span class="line"><span class="built_in">NSRange</span> range = [URLString rangeOfString:<span class="string">@"custom://techbird.me"</span>];</span><br><span class="line"><span class="keyword">if</span> (range.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 点击网页中的图片,实现OC原生界面的跳转</span></span><br><span class="line">TestViewController * VC = [[TestViewController alloc] init];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:VC animated:<span class="literal">YES</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h1><p>JSContext是JavaScript的运行上下文，他主要作用是执行js代码和注册native方法接口</p><h2 id="JSContexts实现OC与JS交互"><a href="#JSContexts实现OC与JS交互" class="headerlink" title="JSContexts实现OC与JS交互"></a>JSContexts实现OC与JS交互</h2><ul><li>获取上下文<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用JSContext-实现-JS调用OC"><a href="#使用JSContext-实现-JS调用OC" class="headerlink" title="使用JSContext 实现 JS调用OC"></a>使用JSContext 实现 JS调用OC</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>]];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line"><span class="keyword">self</span>.webView.delegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上下文</span></span><br><span class="line">JSContext * context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line"><span class="comment">// 监听图片标签点击</span></span><br><span class="line">context[<span class="string">@"imgtag"</span>] = ^ &#123;</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[TestViewController new] animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 监听购买标签点击</span></span><br><span class="line">context[<span class="string">@"buytag"</span>] = ^ &#123;</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[Test1ViewController new] animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JSContext-实现-JS注入"><a href="#使用JSContext-实现-JS注入" class="headerlink" title="使用JSContext 实现 JS注入"></a>使用JSContext 实现 JS注入</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> * )webView</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拿到JS的上下文</span></span><br><span class="line">JSContext * context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用JS的函数,还可以向函数里面传入需要的参数.在XCode中向JS中的alert传入需要的message</span></span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给图片标签添加点击事件 : 自定义协议</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function imgtagclick() &#123;imgtag();&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给以过期的购买标签重新添加点击事件</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var buyBtnTag = document.getElementsByClassName('buy-btn btn-gray')[0]; buyBtnTag.onclick = function buybtnclick() &#123;buytag();&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行这个JS代码</span></span><br><span class="line">[context evaluateScript:JSStringM];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h1><blockquote><p>Starting in iOS 8.0 and OS X 10.10, use WKWebView to add web content to your app. Do not use UIWebView or WebView.</p></blockquote><h2 id="WKWebView的OC和JS交互"><a href="#WKWebView的OC和JS交互" class="headerlink" title="WKWebView的OC和JS交互"></a>WKWebView的OC和JS交互</h2><ul><li><p>使用前导入头文件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;WebKit/WebKit.h&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>遵守代理协议</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.navigationDelegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代理方法介绍"><a href="#代理方法介绍" class="headerlink" title="代理方法介绍"></a>代理方法介绍</h3><ul><li><p>面即将开始加载时调用 (拦截网页的网络请求 : JS调用OC)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure></li><li><p>页面开始加载时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didStartProvisionalNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>收到响应后,决定是否跳转,即是否把这个链接对应的网页加载到WKWebView上</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> * )navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure></li><li><p>当内容开始返回时调用,即服务器已经在向客户端发送网页数据</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didCommitNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>页面加载完成之后调用 (OC调用JS : JS注入)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFinishNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li><li><p>页面加载失败时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFailProvisionalNavigation:(<span class="built_in">WKNavigation</span> * )navigation;</span><br></pre></td></tr></table></figure></li></ul><h3 id="准备WKWebView"><a href="#准备WKWebView" class="headerlink" title="准备WKWebView"></a>准备WKWebView</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WKWebView</span></span><br><span class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">webView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="keyword">self</span>.webView = webView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载的网页</span></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OC调用JS-JS注入-类似UIWebView"><a href="#OC调用JS-JS注入-类似UIWebView" class="headerlink" title="OC调用JS : JS注入 (类似UIWebView)"></a>OC调用JS : JS注入 (类似UIWebView)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载完成之后调用</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView didFinishNavigation:(<span class="built_in">WKNavigation</span> * )navigation</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 拼接JS的代码</span></span><br><span class="line"><span class="built_in">NSMutableString</span> * JSStringM = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除导航</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var headerTag = document.getElementsByTagName('header')[0];headerTag.parentNode.removeChild(headerTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部悬停按钮</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerBtnTag = document.getElementsByClassName('footer-btn-fix')[0]; footerBtnTag.parentNode.removeChild(footerBtnTag);"</span>];</span><br><span class="line"><span class="comment">// 删除底部布局</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var footerTag = document.getElementsByClassName('footer')[0]; footerTag.parentNode.removeChild(footerTag);"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给标签添加点击事件 : 自定义协议</span></span><br><span class="line">[JSStringM appendString:<span class="string">@"var figureTag = document.getElementsByTagName('figure')[0].children[0]; figureTag.onclick = function()&#123;window.location.href = 'custom://techbird.me'&#125;;"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// OC调用JS代码</span></span><br><span class="line">[webView evaluateJavaScript:JSStringM completionHandler:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS调用OC-类似UIWebView"><a href="#JS调用OC-类似UIWebView" class="headerlink" title="JS调用OC : (类似UIWebView)"></a>JS调用OC : (类似UIWebView)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在发送请求之前，决定是否跳转</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"在发送请求之前，决定是否跳转 decidePolicyForNavigationAction"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> * URLString = navigationAction.request.URL.absoluteString;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"监测到的WKWebView上的请求 %@"</span>,URLString);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSRange</span> range = [URLString rangeOfString:<span class="string">@"custom://"</span>];</span><br><span class="line"><span class="keyword">if</span> (range.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:[[TestViewController alloc] init] animated:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许跳转,即不加载这个链接对应的内容</span></span><br><span class="line">decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 允许跳转,即加载这个链接对应的内容</span></span><br><span class="line">decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WKWebView-监听加载进度"><a href="#WKWebView-监听加载进度" class="headerlink" title="WKWebView 监听加载进度"></a>WKWebView 监听加载进度</h2><h3 id="初始化WKWebView和进度条"><a href="#初始化WKWebView和进度条" class="headerlink" title="初始化WKWebView和进度条"></a>初始化WKWebView和进度条</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">[<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建进度条</span></span><br><span class="line"><span class="keyword">self</span>.progress = [[<span class="built_in">UIProgressView</span> alloc] init];</span><br><span class="line"><span class="keyword">self</span>.progress.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width, <span class="number">10</span>);</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.progress];</span><br><span class="line"><span class="keyword">self</span>.progress.progress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WKWebView</span></span><br><span class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">webView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="keyword">self</span>.webView = webView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载的网页</span></span><br><span class="line"><span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.dianping.com/tuan/deal/5501525"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line">[<span class="keyword">self</span>.webView loadRequest:request];</span><br><span class="line"></span><br><span class="line"><span class="comment">// KVO添加进度监听</span></span><br><span class="line">[webView addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"estimatedProgress"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KVO监听进度"><a href="#KVO监听进度" class="headerlink" title="KVO监听进度"></a>KVO监听进度</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> * )keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span> * )change context:(<span class="keyword">void</span> * )context &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (object == <span class="keyword">self</span>.webView &amp;&amp; [keyPath isEqualToString:<span class="string">@"estimatedProgress"</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> newprogress = [[change objectForKey:<span class="built_in">NSKeyValueChangeNewKey</span>] doubleValue];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"进度 %f"</span>,newprogress);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newprogress != <span class="number">1.000000</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网页加载时就展示进度</span></span><br><span class="line"><span class="keyword">self</span>.progress.hidden = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">self</span>.progress.progress = newprogress;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 网页加载完成就进度</span></span><br><span class="line"><span class="keyword">self</span>.progress.hidden = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WKWebView-其他"><a href="#WKWebView-其他" class="headerlink" title="WKWebView 其他"></a>WKWebView 其他</h2><h3 id="WKUIDelegate"><a href="#WKUIDelegate" class="headerlink" title="WKUIDelegate"></a>WKUIDelegate</h3><ul><li><p>创建一个新的WebView</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">WKWebView</span> * )webView:(<span class="built_in">WKWebView</span> * )webView createWebViewWithConfiguration:(<span class="built_in">WKWebViewConfiguration</span> * )configuration forNavigationAction:(<span class="built_in">WKNavigationAction</span> * )navigationAction windowFeatures:(<span class="built_in">WKWindowFeatures</span> * )windowFeatures;</span><br></pre></td></tr></table></figure></li><li><p>弹出警告的提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出警告的提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           警告框中的内容</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> * )message initiatedByFrame:(<span class="keyword">void</span> (^)())completionHandler;</span><br></pre></td></tr></table></figure></li><li><p>弹出确认的提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出确认的提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           确认框中的内容</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptConfirmPanelWithMessage:(<span class="built_in">NSString</span> * )message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> * )frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> result))completionHandler;</span><br></pre></td></tr></table></figure></li><li><p>弹出输入提示框时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出输入提示框时调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView           实现该代理的webview</span></span><br><span class="line"><span class="comment"> *  @param message           确认框中的内容</span></span><br><span class="line"><span class="comment"> *  @param defaultText       默认的输入框文本信息</span></span><br><span class="line"><span class="comment"> *  @param frame             主窗口</span></span><br><span class="line"><span class="comment"> *  @param completionHandler 警告框消失调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> * )webView runJavaScriptTextInputPanelWithPrompt:(<span class="built_in">NSString</span> * )prompt defaultText:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> * )defaultText initiatedByFrame:(<span class="built_in">WKFrameInfo</span> * )frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> * __<span class="keyword">nullable</span> result))completionHandler;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Bug-Tips"><a href="#Bug-Tips" class="headerlink" title="Bug Tips"></a>Bug Tips</h3><p><a href="https://github.com/ShingoFukuyama/WKWebViewTips" target="_blank" rel="noopener">https://github.com/ShingoFukuyama/WKWebViewTips</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UIWebView&quot;&gt;&lt;a href=&quot;#UIWebView&quot; class=&quot;headerlink&quot; title=&quot;UIWebView&quot;&gt;&lt;/a&gt;UIWebView&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A view that embeds web conten
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="WebView" scheme="http://techbird.me/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Xcode-代码片段Code Snippets</title>
    <link href="http://techbird.me/2018/05/08/xcode-code-snippets/"/>
    <id>http://techbird.me/2018/05/08/xcode-code-snippets/</id>
    <published>2018-05-08T02:01:47.000Z</published>
    <updated>2018-05-08T02:11:57.515Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS开发过程中，经常会用到一些相似的代码。我们可以将这些代码保存起来，在使用的时候直接从Code Snippets拖拽代码块到指定的位置，也可以设置一些快捷方式来调用Xcode代码片段。</p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><ul><li>例如编写以下代码片段<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) &lt;<span class="meta">#Type#&gt; *<span class="meta-string">&lt;#value#&gt;</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p>&lt;##&gt; 作用是占位，## 之间可以输入提示文字。</p><ul><li>使用快捷键：command+option+0</li><li><p>将上述代码片段拖拽到下图所示区域<br>  <img src="http://p7xd6yrmx.bkt.clouddn.com/code%20snippets.png" alt=""></p><blockquote><p><strong>小技巧</strong>：用鼠标选中代码块后把光标放在所选代码块上点击长按2-3秒(光标会由插入标变为小箭头状态)就可以拖拽了</p></blockquote></li><li><p>弹出下图<br>  <img src="http://p7xd6yrmx.bkt.clouddn.com/code%20snippet%20dialog.png" alt=""></p><blockquote><p>Title：标题<br>Summary：描述<br>Platform：可以使用的平台<br>Language：可以在哪些语言中使用<br>Completion Shortcut：快捷方式（例如：@xs）。<br>Completion Scopes：作用范围</p></blockquote></li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>对代码片段进行修改，选中代码片段，点击edit即可。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>对代码片段进行删除，选中代码片段，按delete键即可。</p><h2 id="Git管理"><a href="#Git管理" class="headerlink" title="Git管理"></a>Git管理</h2><p>为了方便在更换电脑后可以更快速的使用自己的代码块，可以托管在Github上进行管理，这样在家里和公司两台Mac任何一端有了更新，另一端随时都可以pull一下使用了。</p><h3 id="Xcode中代码片段默认的目录："><a href="#Xcode中代码片段默认的目录：" class="headerlink" title="Xcode中代码片段默认的目录："></a>Xcode中代码片段默认的目录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Developer/Xcode/UserData/CodeSnippets</span><br></pre></td></tr></table></figure><h3 id="同步代码片段"><a href="#同步代码片段" class="headerlink" title="同步代码片段"></a>同步代码片段</h3><p>上述目录设置成一个 Git 的版本库，将代码片段放到 Github 上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在iOS开发过程中，经常会用到一些相似的代码。我们可以将这些代码保存起来，在使用的时候直接从Code Snippets拖拽代码块到指定的位置，也可以设置一些快捷方式来调用Xcode代码片段。&lt;/p&gt;
&lt;h2 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Xcode" scheme="http://techbird.me/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://techbird.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSURLRequest&amp;NSURLResponse</title>
    <link href="http://techbird.me/2018/05/02/ios-nsurlrequest-and-nsurlresponse/"/>
    <id>http://techbird.me/2018/05/02/ios-nsurlrequest-and-nsurlresponse/</id>
    <published>2018-05-02T14:30:51.000Z</published>
    <updated>2018-05-18T03:22:40.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p7xd6yrmx.bkt.clouddn.com/HTTP%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png" alt=""></p><h2 id="NSURLRequest"><a href="#NSURLRequest" class="headerlink" title="NSURLRequest"></a>NSURLRequest</h2><h3 id="创建请求对象-缓存策略和超时时长都是默认的"><a href="#创建请求对象-缓存策略和超时时长都是默认的" class="headerlink" title="创建请求对象 (缓存策略和超时时长都是默认的)"></a>创建请求对象 (缓存策略和超时时长都是默认的)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br></pre></td></tr></table></figure><h3 id="创建请求对象的同时指定缓存策略和超时时长"><a href="#创建请求对象的同时指定缓存策略和超时时长" class="headerlink" title="创建请求对象的同时指定缓存策略和超时时长"></a>创建请求对象的同时指定缓存策略和超时时长</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLRequest</span> * request = [<span class="built_in">NSURLRequest</span> requestWithURL:url cachePolicy:<span class="number">0</span> timeoutInterval:<span class="number">15</span>];</span><br></pre></td></tr></table></figure><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><table><thead><tr><th>枚举</th><th>数值</th><th>说明</th></tr></thead><tbody><tr><td><code>NSURLRequestUseProtocolCachePolicy</code></td><td>0</td><td>默认的缓存策略</td></tr><tr><td><code>NSURLRequestReloadIgnoringLocalCacheData</code></td><td>1</td><td><ul><li>忽略本地缓存数据，始终加载服务器的数据</li><li>对数据的及时性要求高的应用</li></ul></td></tr><tr><td><code>NSURLRequestReturnCacheDataElseLoad</code></td><td>2</td><td>如果有缓存，就返回缓存，否则加载最新数据</td></tr><tr><td><code>NSURLRequestReturnCacheDataDontLoad</code></td><td>3</td><td>只加载缓存数据,不去服务器上获取(离线地图)</td></tr></tbody></table><h3 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h3><ul><li>默认网络时长是 <code>60 s</code><blockquote><p><code>SDWebImage</code> 的默认超时时长是 <code>15</code> 秒<br><code>AFN</code> 的默认超时时长是 <code>60</code> 秒</p></blockquote></li></ul><h3 id="NSMutableURLRequest（可变请求）"><a href="#NSMutableURLRequest（可变请求）" class="headerlink" title="NSMutableURLRequest（可变请求）"></a>NSMutableURLRequest（可变请求）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可变的请求对象才能设置额外的信息</span></span><br><span class="line"><span class="built_in">NSMutableURLRequest</span> *requestM = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url cachePolicy:<span class="number">0</span> timeoutInterval:<span class="number">15</span>];</span><br><span class="line"><span class="comment">// 设置请求头 : 告诉服务器,我的设备是iphone</span></span><br><span class="line">[requestM setValue:<span class="string">@"iphone AppleWebKit"</span> forHTTPHeaderField:<span class="string">@"User-Agent"</span>];</span><br></pre></td></tr></table></figure><h2 id="NSURLResponse"><a href="#NSURLResponse" class="headerlink" title="NSURLResponse"></a>NSURLResponse</h2><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><table><thead><tr><th>响应属性</th><th>说明</th></tr></thead><tbody><tr><td><code>URL</code></td><td>服务器反馈的 URL，有的时候，服务器会重定向新的 URL</td></tr><tr><td><code>MIMEType</code></td><td><ul><li>服务器告诉客户端，返回的二进制数据的类型（纯文本，视频，语音，超文本等）</li><li><code>ContentType</code></li><li>根据 MIMEType 客户端就知道使用什么软件处理返回的二进制数据</li></ul></td></tr><tr><td><code>statusCode</code></td><td>状态码<br><ul><li>1XX消息</li><li>2XX 成功</li><li>3XX 更多选择</li><li>4XX 客户端错误</li><li>5XX 服务器错误</li></ul></td></tr><tr><td><code>expectedContentLength</code></td><td>数据长度，下载文件总长度</td></tr><tr><td><code>suggestedFilename</code></td><td>获取服务器的文件的名称</td></tr><tr><td><code>allHeaderFields</code></td><td>返回数据的头部信息，key－value格式</td></tr><tr><td><code>textEncodingName</code></td><td>编码的名称</td></tr></tbody></table><h3 id="响应体-data"><a href="#响应体-data" class="headerlink" title="响应体 data"></a>响应体 data</h3><ul><li><code>data</code> 服务器返回的二进制数据，程序员最关心的内容</li><li>拿到响应体之后,无法直接使用,需要进行反序列化,转换成OC对象.</li></ul><h2 id="GET请求-URL中有中文时如何处理？"><a href="#GET请求-URL中有中文时如何处理？" class="headerlink" title="GET请求 URL中有中文时如何处理？"></a>GET请求 URL中有中文时如何处理？</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * URLString = [URLString stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet]];</span><br></pre></td></tr></table></figure><blockquote><p>注意：GET请求时,问号<code>?</code>后面的查询字符串里面不能有中文或者空格.如果有就需要使用%转义,不然URL会为nil. POST请求时,请求体里面可以有中文.<br>URLQueryAllowedCharacterSet : 百分号转义查询字符串</p></blockquote><h2 id="URL转字符串的方法"><a href="#URL转字符串的方法" class="headerlink" title="URL转字符串的方法"></a>URL转字符串的方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[filePath.path / filePath.absoluteString]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p7xd6yrmx.bkt.clouddn.com/HTTP%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;NSURLRequest&quot;&gt;&lt;a href=&quot;#NSUR
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="NSURLRequest" scheme="http://techbird.me/tags/NSURLRequest/"/>
    
      <category term="NSURLResponse" scheme="http://techbird.me/tags/NSURLResponse/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSURLSession</title>
    <link href="http://techbird.me/2018/04/29/ios-network-nsurlsession/"/>
    <id>http://techbird.me/2018/04/29/ios-network-nsurlsession/</id>
    <published>2018-04-29T11:31:42.000Z</published>
    <updated>2018-05-10T04:28:58.396Z</updated>
    
    <content type="html"><![CDATA[<p>Apple在 iOS9.0 之后已经放弃了 NSURLConnection，所以在现在的实际开发中，一般使用的是 iOS7.0 之后推出的 NSURLSession。NSURLSession 和 NSURLConnection 都提供了与各种协议，诸如 HTTP 和 HTTPS 进行交互的API。会话对象（NSURLSession 类对象）就是用于管理这种交互过程。它是一个高度可配置的容器，通过使用其提供的API，可进行细粒度的管理控制。它提供了在 NSURLConnection 中的所有特性，此外，它还可以实现 NSURLConnection 不能完成的任务，例如实现私密浏览。</p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.158bd84a0f3f4822a513d7866930dfe8.png" alt=""></p><h2 id="NSURLSession发送网络请求"><a href="#NSURLSession发送网络请求" class="headerlink" title="NSURLSession发送网络请求"></a>NSURLSession发送网络请求</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSURL</span> * URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.baidu.com"</span>];</span><br><span class="line">    <span class="built_in">NSURLSession</span> * session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line"><span class="built_in">NSURLSessionDataTask</span> * dataTask = [session dataTaskWithURL:URL completionHandler:^(<span class="built_in">NSData</span> * data, <span class="built_in">NSURLResponse</span> * response, <span class="built_in">NSError</span> * error) &#123;</span><br><span class="line"> <span class="comment">// data : 响应体; response : 响应头; error : 错误信息</span></span><br><span class="line"> <span class="keyword">if</span> (error == <span class="literal">nil</span> &amp;&amp; data != <span class="literal">nil</span>)&#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@ -- %@ -- %@"</span>,response,data,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;];</span><br><span class="line">   [dataTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML字符串反序列化"><a href="#HTML字符串反序列化" class="headerlink" title="HTML字符串反序列化"></a>HTML字符串反序列化</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="comment">// 反序列化HTML字符串</span></span><br><span class="line"><span class="built_in">NSString</span> * html = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="comment">// 展示HTML字符串</span></span><br><span class="line">[<span class="keyword">self</span>.webView loadHTMLString:html baseURL:URL];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>为了方便程序员使用，NSURLSession提供了一个全局单例 session.</li><li>所有的 任务(Task) 都是由 session 发起的.</li><li>所有的任务默认是挂起的，需要 resume.</li><li>完成回调是异步的</li><li>session可以自定义,自定义的时候可以同时设置代理.<blockquote><p>AFNetworing 底层其实就是对 NSURLSession 的封装</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apple在 iOS9.0 之后已经放弃了 NSURLConnection，所以在现在的实际开发中，一般使用的是 iOS7.0 之后推出的 NSURLSession。NSURLSession 和 NSURLConnection 都提供了与各种协议，诸如 HTTP 和 HTT
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="NSURLSession" scheme="http://techbird.me/tags/NSURLSession/"/>
    
  </entry>
  
  <entry>
    <title>iOS-网络基础&amp;Http和Https</title>
    <link href="http://techbird.me/2018/04/29/ios-networkbase-http-and-https/"/>
    <id>http://techbird.me/2018/04/29/ios-networkbase-http-and-https/</id>
    <published>2018-04-29T09:29:30.000Z</published>
    <updated>2018-05-18T03:26:14.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP：Hyper Text Transfer Protocol（超文本传输协议）的缩写，HTTP是一个基于TCP/IP通信协议来传递数据，默认端口号为80,是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"></span><br><span class="line">（这里是请求数据）</span><br></pre></td></tr></table></figure><ul><li>第一部分：第一行是请求行（request line）</li><li>第二部分：请求头（header），用来说明服务器要使用的附加信息</li><li>第三部分：空行，请求头后面的空行是<code>必须</code>的</li><li>第四部分：请求数据也叫主体，可以添加任意数据</li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><ul><li>第一部分：请求行，第一行是post请求，以及http1.1版本。</li><li>第二部分：请求头部，第二行至第六行。</li><li>第三部分：空行，第七行的空行。</li><li>第四部分：请求数据，第八行。</li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ul><li>GET请求的数据会附在URL之后显示出来（数据放置在http协议头中）而POST把提交的数据放置在是HTTP包的包体中</li><li>传输数据的大小：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。但GET请求时特定浏览器和服务器对URL长度有限制（eg:IE限制2083个字节,2k+35）</li><li>安全性：POST的安全性要比GET的安全性高（GET提交时，用户名密码会明文出现在URL上）</li></ul><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 April 2018 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body goes here--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</li><li>第二部分：消息报头，用来说明客户端要使用的一些附加信息</li><li>第三部分：空行，消息报头后面的空行是必须的</li><li>第四部分：响应正文，服务器返回给客户端的文本信息。</li></ul><h2 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h2><ul><li>1xx：指示信息–表示请求已接收，继续处理</li><li>2xx：成功–表示请求已被成功接收、理解、接受</li><li>3xx：重定向–要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误–请求有语法错误或请求无法实现</li><li>5xx：服务器端错误–服务器未能实现合法的请求</li></ul><h2 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h2><h3 id="IP地址（主机名）"><a href="#IP地址（主机名）" class="headerlink" title="IP地址（主机名）"></a>IP地址（主机名）</h3><ul><li>网络中设备的标示</li><li>本地回环地址：127.0.0.1 主机名：localhost</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul><li>用于标示进程的逻辑地址，不同进程的标示</li><li>有效端口：<code>0-65535</code></li><li>其中 <code>0-1024</code>由系统使用或者保留端口，开发中不要使用 1024 以下的端口</li><li><strong>注意</strong> : 跟HTTP相关的端口一定是80.服务器上有个进程是专门处理HTTP请求的,端口号是80.处理HTTPS请求的端口号是443.</li></ul><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><ul><li><p>UDP(数据报文协议)</p><ul><li>只管发送，不确认对方是否接收到</li><li>将数据源和目的封装成数据包中，不需要建立连接</li><li>每个数据报的大小限制在64K之内</li><li>因为无需连接，因此是不可靠协议</li><li>不需要建立连接，速度快</li><li>应用场景：多媒体教室／网络流媒体 / 视频实时共享</li><li>当视频共享时,出现卡屏,就是因为UDP协议在传递数据时出现丢包.</li></ul></li><li><p>TCP(传输控制协议)</p><ul><li>建立连接，形成传输数据的通道</li><li>在连接中进行大数据传输（数据大小不受限制）</li><li>通过三次握手完成连接，是可靠协议</li><li>必须建立连接，效率会稍低</li><li>TCP协议的传输速度比UDP协议慢</li></ul></li></ul><h3 id="三次握手的描述"><a href="#三次握手的描述" class="headerlink" title="三次握手的描述"></a>三次握手的描述</h3><ul><li>图解：<img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.87a614095854472c81c8ac1a969ffa72.png" alt=""></li><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li><li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</li></ul><h3 id="注："><a href="#注：" class="headerlink" title="注："></a><strong>注：</strong></h3><blockquote><p>通过 IP 找机器，通过 端口 找程序，通过 协议 确定如何传输数据</p></blockquote><h2 id="TCP-IP网络参考模型"><a href="#TCP-IP网络参考模型" class="headerlink" title="TCP/IP网络参考模型"></a>TCP/IP网络参考模型</h2><h3 id="网络模型（理论）"><a href="#网络模型（理论）" class="headerlink" title="网络模型（理论）"></a>网络模型（理论）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.2ea00009b0c74a25b976747621d72639.png" alt=""></p><h3 id="网络参考模型（现实）"><a href="#网络参考模型（现实）" class="headerlink" title="网络参考模型（现实）"></a>网络参考模型（现实）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.aea23a46d7d24e29a2571d783d322731.png" alt=""></p><h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.0d002381b3764feb871651ff7c1cb40e.png" alt=""></p><ul><li>应用层 : APP</li><li>传输层 : TCP,确定数据如何传输</li><li>网络层 : 确定目标计算机的IP地址</li><li>链路层 : 硬件,添加帧头帧尾<blockquote><p>HTTP网络传输协议在传输层选择的是TCP/IP协议</p></blockquote></li></ul><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><ul><li>HTTPS : Hyper Text Transfer Protocol over Secure Socket Layer,是以安全为目标的HTTP通道,简单讲是HTTP的安全版.即HTTP下加入SSL层,HTTPS的安全基础是SSL.</li><li>SSL : Secure Sockets Layer,表示安全套接层.</li><li>TLS : Transport Layer Security,是SSL的继任者,表示传输层安全.</li><li>SSL与TLS是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密.<br><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.83f8b9a805764efbb13d72ef85ddf51a.png" alt=""></li></ul><h2 id="HTTPS加密原理"><a href="#HTTPS加密原理" class="headerlink" title="HTTPS加密原理"></a>HTTPS加密原理</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.99e36c340e94445f87a441f0f2c85f97.png" alt=""></p><h2 id="加密科普（对称，非对称，散列-）"><a href="#加密科普（对称，非对称，散列-）" class="headerlink" title="加密科普（对称，非对称，散列 ）"></a>加密科普（对称，非对称，散列 ）</h2><p>HTTPS一般使用的加密与HASH算法如下：<br>非对称加密算法：RSA，DSA/DSS<br>对称加密算法：AES，RC4，3DES<br>HASH算法：MD5，SHA1，SHA256<br>其中非对称加密算法用于在握手过程中加密生成的密码，对称加密算法用于对真正传输的数据进行加密，而HASH算法用于验证数据的完整性。由于浏览器生成的密码是整个数据加密的关键，因此在传输的时候使用了非对称加密算法对其加密。非对称加密算法会生成公钥和私钥，公钥只能用于加密数据，因此可以随意传输，而网站的私钥用于对数据进行解密，所以网站都会非常小心的保管自己的私钥，防止泄漏。</p><h2 id="小结（面试时如何回答"><a href="#小结（面试时如何回答" class="headerlink" title="小结（面试时如何回答)"></a>小结（面试时如何回答)</h2><ul><li>HTTP就是一个用文本格式描述报文头并用双换行分隔报文头和内容，在TCP基础上实现的请求-响应模式的双向通信协议。</li><li>HTTPS并不是一个单独的协议，是对工作在一个加密连接（SSL/TLS) 上的常规HTTP协议。通过在TCP和HTTP之间加入TLS（Transport Layer Security）来加密。</li><li>SSL/TLS协议加密会使传输速度会变慢，更耗资源，但是更安全</li></ul><p>相关文章：</p><ol><li><a href="https://www.cnblogs.com/Yfling/p/6670495.html" target="_blank" rel="noopener">https://www.cnblogs.com/Yfling/p/6670495.html</a></li><li><a href="http://fullstack.blog/2017/03/12/%E4%B9%9D%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E6%82%89HTTPS/#BS-%E5%88%A9%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">http://fullstack.blog/2017/03/12/%E4%B9%9D%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E6%82%89HTTPS/#BS-%E5%88%A9%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;p&gt;HTTP：Hyper Text Transfer Protocol（超文本传输协议）的缩写，HTTP是一个基于TCP/IP通
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Network" scheme="http://techbird.me/tags/Network/"/>
    
      <category term="Http" scheme="http://techbird.me/tags/Http/"/>
    
      <category term="Https" scheme="http://techbird.me/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之NSOperation</title>
    <link href="http://techbird.me/2018/04/29/ios-thread-nsoperation/"/>
    <id>http://techbird.me/2018/04/29/ios-thread-nsoperation/</id>
    <published>2018-04-29T09:14:05.000Z</published>
    <updated>2018-05-19T09:01:03.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h1><p>apple提供的多线程解决方案<code>NSOperation</code>是一个表示与单个任务关联的代码和数据的抽象类；因为是一个抽象类，所以不能直接使用，需要使用它的两个子类(<code>NSInvocationOperation</code> or <code>NSBlockOperation</code>) 去执行实际的操作任务；同样我们也可以通过自定义NSOperation。通常将操作添加到操作队列（<code>NSOperationQueue</code>类的实例）来执行操作。其实<code>NSOperation</code>就是对<code>GCD</code>的封装，相对于GCD来说可控性更强，并且可以加入操作依赖（<code>addDependency:</code> and <code>removeDependency</code>）。</p><h2 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo1 &#123;</span><br><span class="line">    <span class="built_in">NSInvocationOperation</span> * op = [[<span class="built_in">NSInvocationOperation</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(oprationTask:) object:<span class="string">@"InvocationOperation"</span>];</span><br><span class="line">    [op start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)operationTask:(<span class="keyword">id</span>)param &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：发现在主线程中输出的结果，但<code>start</code>方法是在<code>当前线程</code>中执行的<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 14:45:07.956558+0800 NSOperation练习[1324:290009] &lt;NSThread: 0x604000078000&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></figure></p><h3 id="将操作添加到队列"><a href="#将操作添加到队列" class="headerlink" title="将操作添加到队列"></a>将操作添加到队列</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo2 &#123;</span><br><span class="line"><span class="built_in">NSInvocationOperation</span> * op = [[<span class="built_in">NSInvocationOperation</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(oprationTask:) object:<span class="string">@"InvocationOperation"</span>];</span><br><span class="line"><span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">[queue addOperation:op];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：开启子线程异步执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 14:50:53.013010+0800 NSOperation练习[1408:312296] &lt;NSThread: 0x60400046b600&gt;&#123;number = 3, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="NSBlockOperation-使用较多"><a href="#NSBlockOperation-使用较多" class="headerlink" title="NSBlockOperation (使用较多)"></a>NSBlockOperation (使用较多)</h2><h3 id="start-1"><a href="#start-1" class="headerlink" title="start"></a>start</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo4 &#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">    [op start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<code>start</code>方法是在<code>当前线程</code>中执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 15:06:11.837276+0800 NSOperation练习[1661:375754] &lt;NSThread: 0x6000000745c0&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></figure></p><h3 id="将操作添加到队列-1"><a href="#将操作添加到队列-1" class="headerlink" title="将操作添加到队列"></a>将操作添加到队列</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo5 &#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    [queue addOperation:op];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：开启子线程异步执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 15:10:23.974301+0800 NSOperation练习[1720:389949] &lt;NSThread: 0x60400027ea40&gt;&#123;number = 3, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h3 id="执行块"><a href="#执行块" class="headerlink" title="执行块"></a>执行块</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo6 &#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"block 2 %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [op addExecutionBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"block 1 %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    [queue addOperation:op];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, op.executionBlocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：执行块和操作享有共同的属性设置，异步执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 15:20:27.839119+0800 NSOperation练习[1882:431125] (</span><br><span class="line">    "&lt;__NSGlobalBlock__: 0x1086f9080&gt;",</span><br><span class="line">    "&lt;__NSGlobalBlock__: 0x1086f90c0&gt;"</span><br><span class="line">)</span><br><span class="line">2018-05-19 15:20:27.839131+0800 NSOperation练习[1882:431333] block 2 &lt;NSThread: 0x60000027bbc0&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 15:20:27.839133+0800 NSOperation练习[1882:431330] block 1 &lt;NSThread: 0x604000466fc0&gt;&#123;number = 4, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h3 id="线程间通讯"><a href="#线程间通讯" class="headerlink" title="线程间通讯"></a>线程间通讯</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo7&#123;</span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> new] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"consuming time：%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"><span class="comment">/// 回到主线程刷新UI</span></span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"refresh ui: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听block执行完成"><a href="#监听block执行完成" class="headerlink" title="监听block执行完成"></a>监听block执行完成</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo13 &#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%zd %@"</span>,i,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">//设置监听操作执行完成的block，必须要在把操作添加到队列之前设置</span></span><br><span class="line">    [op setCompletionBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"setCompletionBlock  %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">    [[<span class="built_in">NSOperationQueue</span> new]addOperation:op];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 16:12:00.170053+0800 NSOperation练习[2607:585084] 0 &lt;NSThread: 0x60000027bd80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:12:00.170267+0800 NSOperation练习[2607:585084] 1 &lt;NSThread: 0x60000027bd80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:12:00.170410+0800 NSOperation练习[2607:585084] 2 &lt;NSThread: 0x60000027bd80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:12:00.171319+0800 NSOperation练习[2607:585084] 3 &lt;NSThread: 0x60000027bd80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:12:00.171538+0800 NSOperation练习[2607:585084] 4 &lt;NSThread: 0x60000027bd80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:12:00.171816+0800 NSOperation练习[2607:585083] setCompletionBlock  &lt;NSThread: 0x60000027bd40&gt;&#123;number = 4, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义NSOperation"><a href="#自定义NSOperation" class="headerlink" title="自定义NSOperation"></a>自定义NSOperation</h2><h3 id="自定义类继承NSOperation"><a href="#自定义类继承NSOperation" class="headerlink" title="自定义类继承NSOperation"></a>自定义类继承NSOperation</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomOperation</span> : <span class="title">NSOperation</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    DownloadOperation * op = [[DownloadOperation alloc]init];</span><br><span class="line">    [queue addOperation:op];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写main方法"><a href="#重写main方法" class="headerlink" title="重写main方法"></a>重写main方法</h3><p>任何操作在执行时,首先会调用start方法,start方法会更新操作的状态(过滤操作)；经start方法过滤之后，只有正常可执行的操作，就会调用这个main方法，重写操作的入口方法(main方法)，就可以在这个方法里面指定操作执行的任务。<code>main</code>方法默认在子线程中异步执行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)main</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在这个方法中做想要做的操作，即自定义 NSOperation的目的</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="keyword">self</span>.URLString,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h1><p><img src="http://p7xd6yrmx.bkt.clouddn.com/%E6%93%8D%E4%BD%9C%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%98%9F%E5%88%97.png" alt=""></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>NSOperationQueue</code>只有一种类型，就是并发队列。在开发使用到<code>NSOperationQueue</code>时，建议将其定义为<code>全局</code>队列。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义为属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *queue;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSOperationQueue</span> * )queue</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.queue == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最大并发数"><a href="#最大并发数" class="headerlink" title="最大并发数"></a>最大并发数</h2><p><img src="http://p7xd6yrmx.bkt.clouddn.com/%E9%98%9F%E5%88%97%E6%9C%80%E5%A4%A7%E5%B9%B6%E5%8F%91%E6%95%B0.png" alt=""><br><code>maxConcurrentOperationCount</code>是队列的一个属性，可以限制队列<code>同时执行</code>的任务数量，从而间接的控制了线程数量(线程可以复用)，但队列最大并发数不是线程数。如果队列最大并发数设置为<code>1</code>，那么队列实际上就是一个串行队列了。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置最大并发数 : 每次只能调度两个操作执行</span></span><br><span class="line">queue.maxConcurrentOperationCount = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h2 id="验证队列的并发性"><a href="#验证队列的并发性" class="headerlink" title="验证队列的并发性"></a>验证队列的并发性</h2><h3 id="NSOperationQueue-amp-NSInvocationOperation"><a href="#NSOperationQueue-amp-NSInvocationOperation" class="headerlink" title="NSOperationQueue &amp; NSInvocationOperation"></a>NSOperationQueue &amp; NSInvocationOperation</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo8 &#123;</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">NSInvocationOperation</span> * op = [[<span class="built_in">NSInvocationOperation</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(operationTask:) object:@(i)];</span><br><span class="line">        [queue addOperation:op];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：会开启多条线程,不是顺序执行.与GCD中并发队列&amp;异步执行效果一样，说明<code>NSOperationQueue</code>默认是并发执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 15:01:47.478515+0800 NSOperation练习[1593:358939] &lt;NSThread: 0x60400047a580&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478518+0800 NSOperation练习[1593:358938] &lt;NSThread: 0x600000263680&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478519+0800 NSOperation练习[1593:358936] &lt;NSThread: 0x60400047a500&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478572+0800 NSOperation练习[1593:358935] &lt;NSThread: 0x60400047a640&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478740+0800 NSOperation练习[1593:358974] &lt;NSThread: 0x600000263a40&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478881+0800 NSOperation练习[1593:358938] &lt;NSThread: 0x600000263680&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.478902+0800 NSOperation练习[1593:358939] &lt;NSThread: 0x60400047a580&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.479084+0800 NSOperation练习[1593:358975] &lt;NSThread: 0x6000002636c0&gt;&#123;number = 8, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.479096+0800 NSOperation练习[1593:358976] &lt;NSThread: 0x600000263d00&gt;&#123;number = 10, name = (null)&#125;</span><br><span class="line">2018-05-19 15:01:47.479128+0800 NSOperation练习[1593:358977] &lt;NSThread: 0x600000263dc0&gt;&#123;number = 9, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h3 id="NSOperationQueue-amp-NSBlockOperation"><a href="#NSOperationQueue-amp-NSBlockOperation" class="headerlink" title="NSOperationQueue &amp; NSBlockOperation"></a>NSOperationQueue &amp; NSBlockOperation</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo10 &#123;</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">NSBlockOperation</span> * op = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;];</span><br><span class="line">        [queue addOperation:op];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：会开启多条线程,不是顺序执行.与GCD中并发队列&amp;异步执行效果一样，说明<code>NSOperationQueue</code>默认是并发执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 15:26:52.141566+0800 NSOperation练习[1984:456384] &lt;NSThread: 0x60000027ef80&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141566+0800 NSOperation练习[1984:456319] &lt;NSThread: 0x604000468dc0&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141569+0800 NSOperation练习[1984:456314] &lt;NSThread: 0x60000027f040&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141641+0800 NSOperation练习[1984:456313] &lt;NSThread: 0x604000469d80&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141661+0800 NSOperation练习[1984:456385] &lt;NSThread: 0x60000027ee80&gt;&#123;number = 8, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141676+0800 NSOperation练习[1984:456318] &lt;NSThread: 0x604000469c40&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141928+0800 NSOperation练习[1984:456384] &lt;NSThread: 0x60000027ef80&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141945+0800 NSOperation练习[1984:456319] &lt;NSThread: 0x604000468dc0&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.141954+0800 NSOperation练习[1984:456314] &lt;NSThread: 0x60000027f040&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 15:26:52.142048+0800 NSOperation练习[1984:456386] &lt;NSThread: 0x60000027f380&gt;&#123;number = 9, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="队列暂停继续和取消全部"><a href="#队列暂停继续和取消全部" class="headerlink" title="队列暂停继续和取消全部"></a>队列暂停继续和取消全部</h2><h3 id="isSuspended"><a href="#isSuspended" class="headerlink" title="isSuspended:"></a>isSuspended:</h3><p>暂停和继续队列的属性；YES代表暂停队列，NO代表恢复队列。将队列挂起之后，队列中的操作就不会被调度，但是正在执行的操作不受影响<br><code>operationCount</code>: 操作计数,没有执行和没有执行完的操作,都会计算在操作计数之内</p><blockquote><p>注意 : 如果先暂停队列,再添加操作到队列,队列不会调度操作执行.所以在暂停队列之前要判断队列中有没有任务.如果没有操作就不暂停队列.</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - 演示队列的暂停</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)pause:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 暂停队列之前判断队列中有无操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.queue.operationCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停队列</span></span><br><span class="line">    <span class="keyword">self</span>.queue.suspended = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"pause %zd"</span>,<span class="keyword">self</span>.queue.operationCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cancelAllOperations"><a href="#cancelAllOperations" class="headerlink" title="cancelAllOperations:"></a>cancelAllOperations:</h3><p>取消队列中的全部操作；旦调用的 <code>cancelAllOperations</code>方法，队列中的操作，都会被移除，正在执行的操作除外；正在执行的操作取消不了，如果要取消，需要自定义NSOperation；队列取消全部操作时，会有一定的时间延迟。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)cancelAll:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.queue cancelAllOperations];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"cancelAll %zd"</span>,<span class="keyword">self</span>.queue.operationCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="qualityOfService"><a href="#qualityOfService" class="headerlink" title="qualityOfService"></a>qualityOfService</h1><p>服务质量的枚举：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">NSQualityOfService</span>) &#123;</span><br><span class="line">    <span class="built_in">NSQualityOfServiceUserInteractive</span> = <span class="number">0x21</span>,</span><br><span class="line">    <span class="built_in">NSQualityOfServiceUserInitiated</span> = <span class="number">0x19</span>,</span><br><span class="line">    <span class="built_in">NSQualityOfServiceUtility</span> = <span class="number">0x11</span>,</span><br><span class="line">    <span class="built_in">NSQualityOfServiceBackground</span> = <span class="number">0x09</span>,</span><br><span class="line">    <span class="built_in">NSQualityOfServiceDefault</span> = <span class="number">-1</span></span><br><span class="line">&#125; API_AVAILABLE(macos(<span class="number">10.10</span>), ios(<span class="number">8.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br></pre></td></tr></table></figure></p><h2 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h2><p>让队列里面的操作有更多的机会被队列调度执行，类似于线程优先级<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo11 &#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op1 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"op1 block %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line">        [op1 addExecutionBlock:^&#123;</span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"opt1 %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    op1.qualityOfService = <span class="built_in">NSQualityOfServiceBackground</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op2 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"op2 block %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line">        [op2 addExecutionBlock:^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"opt2 %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    op2.qualityOfService = <span class="built_in">NSQualityOfServiceUserInteractive</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    [queue addOperations:@[op1,op2] waitUntilFinished:<span class="literal">false</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：op2优先于op1执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 16:05:46.292652+0800 NSOperation练习[2511:564443] op2 block &lt;NSThread: 0x600000278580&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292656+0800 NSOperation练习[2511:564453] opt2 &lt;NSThread: 0x600000278680&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292654+0800 NSOperation练习[2511:564445] opt2 &lt;NSThread: 0x604000470ac0&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292709+0800 NSOperation练习[2511:564454] opt2 &lt;NSThread: 0x604000470c40&gt;&#123;number = 8, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292933+0800 NSOperation练习[2511:564453] opt2 &lt;NSThread: 0x600000278680&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292937+0800 NSOperation练习[2511:564443] opt2 &lt;NSThread: 0x600000278580&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292944+0800 NSOperation练习[2511:564446] opt1 &lt;NSThread: 0x604000470b00&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.292960+0800 NSOperation练习[2511:564444] op1 block &lt;NSThread: 0x604000470b80&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.293083+0800 NSOperation练习[2511:564454] opt1 &lt;NSThread: 0x604000470c40&gt;&#123;number = 8, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.293089+0800 NSOperation练习[2511:564453] opt1 &lt;NSThread: 0x600000278680&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.294076+0800 NSOperation练习[2511:564446] opt1 &lt;NSThread: 0x604000470b00&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:46.294207+0800 NSOperation练习[2511:564444] opt1 &lt;NSThread: 0x604000470b80&gt;&#123;number = 3, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo12 &#123;</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * q1 = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line">    <span class="built_in">NSOperationQueue</span> * q2 = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line"></span><br><span class="line">    q1.qualityOfService = <span class="built_in">NSQualityOfServiceBackground</span>;</span><br><span class="line">    q2.qualityOfService = <span class="built_in">NSQualityOfServiceUserInteractive</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i) &#123;</span><br><span class="line">        [q1 addOperationWithBlock:^&#123;</span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"q1"</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        [q2 addOperationWithBlock:^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"q2"</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：q2优先于q1执行<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2018-05-19 16:05:11.965991+0800 NSOperation练习[2487:561497] q2 &lt;NSThread: 0x604000274e00&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.965998+0800 NSOperation练习[2487:561496] q2 &lt;NSThread: 0x600000275740&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.966106+0800 NSOperation练习[2487:561516] q2 &lt;NSThread: 0x600000275940&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.966106+0800 NSOperation练习[2487:561517] q2 &lt;NSThread: 0x604000274f80&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.966316+0800 NSOperation练习[2487:561516] q2 &lt;NSThread: 0x600000275940&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.968284+0800 NSOperation练习[2487:561494] q1 &lt;NSThread: 0x600000263840&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.968303+0800 NSOperation练习[2487:561495] q1 &lt;NSThread: 0x604000275680&gt;&#123;number = 8, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.968376+0800 NSOperation练习[2487:561517] q1 &lt;NSThread: 0x604000274f80&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.968409+0800 NSOperation练习[2487:561496] q1 &lt;NSThread: 0x600000275740&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2018-05-19 16:05:11.969839+0800 NSOperation练习[2487:561494] q1 &lt;NSThread: 0x600000263840&gt;&#123;number = 7, name = (null)&#125;</span><br></pre></td></tr></table></figure></p><h1 id="支持KVO的属性"><a href="#支持KVO的属性" class="headerlink" title="支持KVO的属性"></a>支持KVO的属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isCancelled - read-only   //是否取消</span><br><span class="line"></span><br><span class="line">isAsynchronous - read-only //是否异步</span><br><span class="line"></span><br><span class="line">isExecuting - read-only  //是否正在执行</span><br><span class="line"></span><br><span class="line">isFinished - read-only//是否结束</span><br><span class="line"></span><br><span class="line">isReady - read-only//是否就绪</span><br><span class="line"></span><br><span class="line">dependencies - read-only//依赖的其他的操作</span><br><span class="line"></span><br><span class="line">queuePriority - readable and writable//队列优先级</span><br><span class="line"></span><br><span class="line">completionBlock - readable and writable//结束回调</span><br></pre></td></tr></table></figure><h1 id="操作间依赖"><a href="#操作间依赖" class="headerlink" title="操作间依赖"></a>操作间依赖</h1><h2 id="需求实例"><a href="#需求实例" class="headerlink" title="需求实例"></a>需求实例</h2><p>场景：用户需要先登录-&gt;付费-&gt;下载-&gt;通知用户<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dependency</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op1 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"login %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op2 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"pay %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op3 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"download %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSBlockOperation</span> * op4 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"notice user %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[op2 addDependency:op1]; <span class="comment">// 操作2依赖于操作1</span></span><br><span class="line">[op3 addDependency:op2]; <span class="comment">// 操作3依赖于操作2</span></span><br><span class="line">[op4 addDependency:op3]; <span class="comment">// 操作4依赖于操作3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// waitUntilFinished : 是否等到指定的操作执行结束再执行后面的代码</span></span><br><span class="line">[<span class="keyword">self</span>.queue addOperations:@[op1,op2,op3] waitUntilFinished:<span class="literal">NO</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知用户的操作在主线程中执行</span></span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperation:op4];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证 waitUntilFinished</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>不能循环建立操作间依赖关系.否则,队列不调度操作执行</li><li>操作间可以跨队列建立依赖关系</li><li>要将操作间的依赖建立好了之后,再添加到队列中（先建立操作依赖关系，再把操作添加到队列）</li></ul><h1 id="NSOperation和GCD的区别"><a href="#NSOperation和GCD的区别" class="headerlink" title="NSOperation和GCD的区别"></a>NSOperation和GCD的区别</h1><p><img src="http://p7xd6yrmx.bkt.clouddn.com/GCD%E5%92%8COP%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt=""></p><h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><p>GCD <code>iOS 4.0</code> 推出，针对多核处理器的并发技术。GCD属于C语言的框架。将任务封装在block中，如果要停止已经加入 队列(queue) 的 任务(block) 需要写复杂的代码。只能设置队列的优先级不能设置任务的优先级。</p><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ul><li>barrier</li><li>once</li><li>after</li><li>group</li></ul><h2 id="NSOperation-1"><a href="#NSOperation-1" class="headerlink" title="NSOperation"></a>NSOperation</h2><p>NSOperation <code>iOS 2.0</code> 推出，但在苹果推出 GCD 之后，对NSOperation的底层全部重写。NSOperation属于OC 框架，更加面向对象，底层是对 GCD 的封装。支持取消掉队列中的任务(正在执行的除外)，还可以设置队列中每个操作的优先级</p><h3 id="高级功能-1"><a href="#高级功能-1" class="headerlink" title="高级功能"></a>高级功能</h3><ul><li>最大操作并发数(GCD不好做)</li><li>继续/暂停/全部取消</li><li>跨队列设置操作的依赖关系</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NSOperation&quot;&gt;&lt;a href=&quot;#NSOperation&quot; class=&quot;headerlink&quot; title=&quot;NSOperation&quot;&gt;&lt;/a&gt;NSOperation&lt;/h1&gt;&lt;p&gt;apple提供的多线程解决方案&lt;code&gt;NSOperation&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="NSOperation" scheme="http://techbird.me/tags/NSOperation/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之GCD</title>
    <link href="http://techbird.me/2018/04/29/ios-thread-gcd/"/>
    <id>http://techbird.me/2018/04/29/ios-thread-gcd/</id>
    <published>2018-04-29T07:59:59.000Z</published>
    <updated>2018-05-10T04:29:10.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD与-NSThread-的对比"><a href="#GCD与-NSThread-的对比" class="headerlink" title="GCD与 NSThread 的对比"></a>GCD与 NSThread 的对比</h2><h3 id="NSThread的劣势"><a href="#NSThread的劣势" class="headerlink" title="NSThread的劣势"></a>NSThread的劣势</h3><ul><li>如果要开多个线程 NSThread 必须实例化多个线程对象</li><li>NSThread 靠 NSObject 的分类方法实现的线程间通讯，GCD依靠 block 实现</li></ul><h3 id="GCD的优势"><a href="#GCD的优势" class="headerlink" title="GCD的优势"></a>GCD的优势</h3><ul><li>让代码更加简单，易于阅读和维护</li><li>使用GCD 不需要管理线程的创建/销毁/复用的过程，不用关心线程的生命周期</li><li>GCD会充分利用CPU的内核</li></ul><h2 id="队列有哪些，任务有几种"><a href="#队列有哪些，任务有几种" class="headerlink" title="队列有哪些，任务有几种"></a>队列有哪些，任务有几种</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>串行队列（Serial Dispatch Queue）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure></li><li><p>并行队列（Concurrent Dispatch Queue）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(“flag”, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li><p>同步任务（sync）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li><li><p>异步任务（async）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(queue, ^block);</span><br></pre></td></tr></table></figure></li></ul><h2 id="写一个死锁程序"><a href="#写一个死锁程序" class="headerlink" title="写一个死锁程序"></a>写一个死锁程序</h2><ul><li><p>主队列+同步任务 = 死锁</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>)deadlockDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start”);</span></span><br><span class="line"><span class="string">dispatch_sync(queue, ^&#123;</span></span><br><span class="line"><span class="string">NSLog(@"</span>excuting...%<span class="string">@",[NSThread currentThread]);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">NSLog(@"</span>end<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>死锁解决办法：主队列中的同步任务放进子线程中，不使其阻塞主线程</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> - (<span class="keyword">void</span>)resolveDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_queue_create(<span class="string">"flag"</span>, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"excuting...%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列的两个参数分别代表什么？"><a href="#全局队列的两个参数分别代表什么？" class="headerlink" title="全局队列的两个参数分别代表什么？"></a>全局队列的两个参数分别代表什么？</h2><ul><li>参数1：服务质量(队列对任务调度的优先级)/iOS 7.0 之前，是优先级，传入<code>0</code>在所有系统上使用默认设置</li><li>参数2：预留参数，以便于扩展，一般传入<code>0</code></li><li><strong>小结</strong>：如果要适配 iOS 7.0 &amp; 8.0，需要使用以下代码：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="全局队列和并发队列的区别"><a href="#全局队列和并发队列的区别" class="headerlink" title="全局队列和并发队列的区别"></a>全局队列和并发队列的区别</h2><h3 id="全局队列"><a href="#全局队列" class="headerlink" title="全局队列"></a>全局队列</h3><ul><li>没有名称</li><li>无论MRC &amp; ARC都不需要考虑释放</li></ul><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><ul><li>有名称，和 NSThread 的 name 属性作用类似</li><li>如果在 <code>MRC</code> 开发时,需要使用 <code>dispatch_release(q);</code> 释放相应的对象</li></ul><h3 id="队列和任务组合总结"><a href="#队列和任务组合总结" class="headerlink" title="队列和任务组合总结"></a>队列和任务组合总结</h3><ul><li>串行和并发决定了任务的执行方式(串行一次一个，并发一次多个)</li><li>同步和异步决定了要不要开启新的线程 (同步不开，异步开)</li></ul><h2 id="GCD延迟执行-after"><a href="#GCD延迟执行-after" class="headerlink" title="GCD延迟执行(after)"></a>GCD延迟执行(after)</h2><ul><li>延迟操作: <code>dispatch_after</code> 这个函数默认是异步执行的<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)afterDemo&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span>*<span class="built_in">NSEC_PER_SEC</span>)),dispatch_get_global_queue(),^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"delay code"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="GCD一次性执行-once"><a href="#GCD一次性执行-once" class="headerlink" title="GCD一次性执行(once)"></a>GCD一次性执行(once)</h3><ul><li><code>dispatch_once_t</code> 内部有一把锁,能够保证线程安全.</li><li><strong>原理</strong>：<code>onceToken</code> 有个初始值,当第一次执行时,判断是否是初始值,如果是初始值就执行函数内部的代码,执行结束之前会修改<code>onceToken</code>初始值.反之,就不执行.<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)onceDemo</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"result %ld"</span>,onceToken);</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"hello"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="单例设计模式（iOS）"><a href="#单例设计模式（iOS）" class="headerlink" title="单例设计模式（iOS）"></a>单例设计模式（iOS）</h2><h3 id="单例设计模式的特点"><a href="#单例设计模式的特点" class="headerlink" title="单例设计模式的特点"></a>单例设计模式的特点</h3><ol><li>有一个全局访问点（供全局实例化单例的类方法）</li><li>单例保存在静态存储区</li><li>在内存有且只有一份</li><li>生命周期跟APP一样长</li></ol><h3 id="如何做到被子类继承"><a href="#如何做到被子类继承" class="headerlink" title="如何做到被子类继承"></a>如何做到被子类继承</h3><ul><li>在给instance赋值时要使用<code>[self new];</code>或者<code>[[self alloc] init];</code></li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 保存在静态存储区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="comment">// 声明静态对象</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line">+ (<span class="keyword">void</span>)initialize</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 只会开辟一次内存空间,只会被实例化一次</span></span><br><span class="line">  instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCD与-NSThread-的对比&quot;&gt;&lt;a href=&quot;#GCD与-NSThread-的对比&quot; class=&quot;headerlink&quot; title=&quot;GCD与 NSThread 的对比&quot;&gt;&lt;/a&gt;GCD与 NSThread 的对比&lt;/h2&gt;&lt;h3 id=&quot;NSThr
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="GCD" scheme="http://techbird.me/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-多线程之NSThread</title>
    <link href="http://techbird.me/2018/04/29/ios-nsthread/"/>
    <id>http://techbird.me/2018/04/29/ios-nsthread/</id>
    <published>2018-04-29T06:56:59.000Z</published>
    <updated>2018-05-18T03:25:16.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程基础（NSThread）"><a href="#多线程基础（NSThread）" class="headerlink" title="多线程基础（NSThread）"></a>多线程基础（NSThread）</h1><h2 id="NSThread创建线程的三种方式"><a href="#NSThread创建线程的三种方式" class="headerlink" title="NSThread创建线程的三种方式"></a>NSThread创建线程的三种方式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(demo:) object:<span class="string">@"alloc"</span>];</span><br><span class="line"><span class="number">2.</span> [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(demo:) toTarget:<span class="keyword">self</span> withObject:<span class="string">@"detach"</span>];</span><br><span class="line"><span class="number">3.</span> [<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(demo:) withObject:<span class="string">@"perform"</span>];</span><br></pre></td></tr></table></figure><h2 id="target和selector的关系"><a href="#target和selector的关系" class="headerlink" title="target和selector的关系"></a>target和selector的关系</h2><ul><li>执行哪个对象上的哪个方法.</li></ul><h2 id="线程的状态-生命周期"><a href="#线程的状态-生命周期" class="headerlink" title="线程的状态-生命周期"></a>线程的状态-生命周期</h2><ul><li><code>start</code> ：就绪状态，等待被CPU调用，当被调用的时候为运行状态</li><li><code>sleep/加锁</code>：阻塞状态</li><li><code>exit</code>：完全杀死（非正常死亡），<strong>不要在主线程中调用</strong></li></ul><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><h3 id="name-线程名称"><a href="#name-线程名称" class="headerlink" title="name (线程名称)"></a><code>name</code> (线程名称)</h3><ul><li>设置线程名称可以当线程执行的方法内部出现异常时，记录异常和当前线程</li></ul><h3 id="stackSize-栈区大小"><a href="#stackSize-栈区大小" class="headerlink" title="stackSize(栈区大小)"></a><code>stackSize</code>(栈区大小)</h3><ul><li>默认情况下，无论是主线程还是子线程，栈区大小都是 512K</li><li><p>栈区大小可以设置 </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">NSThread</span> currentThread].stackSize = <span class="number">1024</span> * <span class="number">1024</span>;</span><br></pre></td></tr></table></figure></li><li><p>必须是 <code>4KB</code> 的倍数</p></li></ul><h3 id="isMainThread-是否主线程"><a href="#isMainThread-是否主线程" class="headerlink" title="isMainThread (是否主线程)"></a><code>isMainThread</code> (是否主线程)</h3><h3 id="threadPriority-线程优先级"><a href="#threadPriority-线程优先级" class="headerlink" title="threadPriority (线程优先级)"></a><code>threadPriority</code> (线程优先级)</h3><ul><li>优先级，是一个浮点数，取值范围从<code>0~1.0</code></li><li><code>1.0</code>表示优先级最高</li><li><code>0.0</code>表示优先级最低</li><li>默认优先级是 <code>0.5</code></li><li><strong>优先级高只是保证 CPU 调度的可能性会高</strong></li></ul><h3 id="qualityOfService-服务质量-iOS-8-0-推出"><a href="#qualityOfService-服务质量-iOS-8-0-推出" class="headerlink" title="qualityOfService (服务质量,iOS 8.0 推出)"></a><code>qualityOfService</code> (服务质量,iOS 8.0 推出)</h3><ul><li><code>NSQualityOfServiceUserInteractive</code> - 用户交互，例如绘图或者处理用户事件</li><li><code>NSQualityOfServiceUserInitiated</code> - 用户需要</li><li><code>NSQualityOfServiceUtility</code> - 实用工具，用户不需要立即得到结果</li><li><code>NSQualityOfServiceBackground</code> - 后台</li><li><code>NSQualityOfServiceDefault</code> - 默认，介于用户需要和实用工具之间</li></ul><h2 id="线程安全-资源共享（互斥锁小结）"><a href="#线程安全-资源共享（互斥锁小结）" class="headerlink" title="线程安全-资源共享（互斥锁小结）"></a>线程安全-资源共享（互斥锁小结）</h2><ul><li><code>@synchronized</code>互斥锁，使用了线程同步技术</li><li>同步锁/互斥锁：可以保证被锁定的代码，同一时间，只能有一个县城可以操作</li><li><code>self</code>：锁对象，任何继承自NSObject的对象都可以是锁对象，因为内部都有一把锁，而且是默认开着的</li><li>锁对象：一定要是全局的锁对象，要保证所有的线程都能访问，<code>self</code>是最方便使用的锁对象</li><li>互斥锁锁定的范围应该尽量小，但是一定要锁住资源的<code>读写</code>部分</li><li>加锁后程序的执行效率比不加锁的时候要低，因为线程要的等待解锁</li><li>牺牲了性能保证了安全</li></ul><h2 id="原子属性和非原子属性-以及自旋锁"><a href="#原子属性和非原子属性-以及自旋锁" class="headerlink" title="原子属性和非原子属性-以及自旋锁"></a>原子属性和非原子属性-以及自旋锁</h2><h3 id="nonatomic-非原子属性"><a href="#nonatomic-非原子属性" class="headerlink" title="nonatomic : 非原子属性"></a><code>nonatomic</code> : 非原子属性</h3><ul><li>线程不安全，不考虑多线程情况时使用此属性</li><li>编译器少生成一些互斥加锁代码，可以提高效率。</li></ul><h3 id="atomic-原子属性"><a href="#atomic-原子属性" class="headerlink" title="atomic : 原子属性"></a><code>atomic</code> : 原子属性</h3><ul><li>线程安全的,针对多线程设计的属性修饰符,是默认值.</li><li>特点 : 单写多读</li><li>单写多读 : 保证同一时间,只有一个线程能够执行setter方法,但是可以有多个线程执行getter方法.</li><li>atomic 属性的setter里面里面有一把锁,叫做自旋锁.</li><li>原子属性的setter方法是线程安全的;但是,getter方法不是线程安全的.</li></ul><h3 id="nonatomic和atomic对比："><a href="#nonatomic和atomic对比：" class="headerlink" title="nonatomic和atomic对比："></a><code>nonatomic</code>和<code>atomic</code>对比：</h3><ul><li><code>nonatomic</code>: 非线程安全,适合内存小的移动设备.</li><li><code>atomic</code> : 线程安全,需要消耗大量的资源.性能比非原子属性要差一点</li></ul><h2 id="自旋锁和互斥锁的区别"><a href="#自旋锁和互斥锁的区别" class="headerlink" title="自旋锁和互斥锁的区别"></a>自旋锁和互斥锁的区别</h2><p>举个比较形象的例子就是：在火车上上厕所，自旋锁是比较着急那个人一直会敲门，问好了没有好了没有；而互斥锁就会等待厕所内的人出来之后自己在进去。显然自旋锁更为高效</p><h2 id="线程间通信（为什么能通信？）"><a href="#线程间通信（为什么能通信？）" class="headerlink" title="线程间通信（为什么能通信？）"></a>线程间通信（为什么能通信？）</h2><ul><li><code>performSelectorInBackground</code></li><li><code>performSelectorOnMainThread</code></li><li>因为多线程共享地址空间和数据空间， 一个线程的数据可以直接提供给其他线程使用,叫做线程间通信</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程基础（NSThread）&quot;&gt;&lt;a href=&quot;#多线程基础（NSThread）&quot; class=&quot;headerlink&quot; title=&quot;多线程基础（NSThread）&quot;&gt;&lt;/a&gt;多线程基础（NSThread）&lt;/h1&gt;&lt;h2 id=&quot;NSThread创建线程的
      
    
    </summary>
    
      <category term="iOS" scheme="http://techbird.me/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://techbird.me/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://techbird.me/tags/Objective-C/"/>
    
      <category term="Thread" scheme="http://techbird.me/tags/Thread/"/>
    
      <category term="NSThread" scheme="http://techbird.me/tags/NSThread/"/>
    
  </entry>
  
  <entry>
    <title>Xcode-打包证书创建流程</title>
    <link href="http://techbird.me/2018/04/29/xcode-pack-cer-create-process/"/>
    <id>http://techbird.me/2018/04/29/xcode-pack-cer-create-process/</id>
    <published>2018-04-29T03:48:37.000Z</published>
    <updated>2018-05-08T02:18:00.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建CSR证书"><a href="#创建CSR证书" class="headerlink" title="创建CSR证书"></a>创建CSR证书</h2><h3 id="点击spotlight输入keychain打开钥匙串"><a href="#点击spotlight输入keychain打开钥匙串" class="headerlink" title="点击spotlight输入keychain打开钥匙串"></a>点击spotlight输入keychain打开钥匙串</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/WX20180415-192128.ed09497c15d24f6bb84e812effb1d0f9.png" alt="">  </p><h3 id="生成CSR文件"><a href="#生成CSR文件" class="headerlink" title="生成CSR文件"></a>生成CSR文件</h3><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ae2ad2036be3471b9b1549406a95e44b.png" alt=""></p><h2 id="创建Cer证书"><a href="#创建Cer证书" class="headerlink" title="创建Cer证书"></a>创建Cer证书</h2><h3 id="登录-apple-developer"><a href="#登录-apple-developer" class="headerlink" title="登录 apple developer"></a><a href="https://developer.apple.com/account/" target="_blank" rel="noopener">登录 apple developer</a></h3><h3 id="使用CSR文件创建Development和Distribution的CER证书并下载"><a href="#使用CSR文件创建Development和Distribution的CER证书并下载" class="headerlink" title="使用CSR文件创建Development和Distribution的CER证书并下载"></a>使用CSR文件创建Development和Distribution的CER证书并下载</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.ca56c2a73e474422ac1aaac410172bc6.png" alt=""></p><h3 id="双击下载好的cer证书，然后导出对应的p12文件（dev-dis）"><a href="#双击下载好的cer证书，然后导出对应的p12文件（dev-dis）" class="headerlink" title="双击下载好的cer证书，然后导出对应的p12文件（dev/dis）"></a>双击下载好的cer证书，然后导出对应的p12文件（dev/dis）</h3><p><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.bc375b929a6f463f8d85d6f92e6bc853.png" alt=""></p><h2 id="创建Provisioning-Profile"><a href="#创建Provisioning-Profile" class="headerlink" title="创建Provisioning Profile"></a>创建Provisioning Profile</h2><p>这里要创建是三种profile（dev/dis/adhoc）<br><img src="http://p7xd6yrmx.bkt.clouddn.com/DraggedImage.8b0bda299adf43029f16d552dceac353.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建CSR证书&quot;&gt;&lt;a href=&quot;#创建CSR证书&quot; class=&quot;headerlink&quot; title=&quot;创建CSR证书&quot;&gt;&lt;/a&gt;创建CSR证书&lt;/h2&gt;&lt;h3 id=&quot;点击spotlight输入keychain打开钥匙串&quot;&gt;&lt;a href=&quot;#点击spotl
      
    
    </summary>
    
      <category term="Xcode" scheme="http://techbird.me/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://techbird.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://techbird.me/2018/04/22/hello-world/"/>
    <id>http://techbird.me/2018/04/22/hello-world/</id>
    <published>2018-04-21T16:31:37.333Z</published>
    <updated>2018-04-26T14:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="云标签" scheme="http://techbird.me/tags/%E4%BA%91%E6%A0%87%E7%AD%BE/"/>
    
      <category term="分类" scheme="http://techbird.me/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
